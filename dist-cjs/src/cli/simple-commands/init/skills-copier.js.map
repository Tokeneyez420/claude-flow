{"version":3,"sources":["../../../../../src/cli/simple-commands/init/skills-copier.js"],"sourcesContent":["// skills-copier.js - Copy all skill files during initialization\nimport { promises as fs } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n/**\n * Copy all skill files from the installed package to project directory\n */\nexport async function copySkillFiles(targetDir, options = {}) {\n  console.log('  üöÄ copySkillFiles function called');\n  console.log(`  üìÇ Target directory: ${targetDir}`);\n  console.log(`  ‚öôÔ∏è  Options:`, options);\n  console.log(`  üìç __dirname: ${__dirname}`);\n\n  const { force = false, dryRun = false } = options;\n\n  // Path to skill files - try multiple locations\n  // From npm package: src/cli/simple-commands/init/ -> root = ../../../../\n  const packageSkillsDir = join(__dirname, '../../../../.claude/skills');\n  const localSkillsDir = join(__dirname, '../../../../../.claude/skills'); // Local development (one more level up)\n  const globalNpmSkillsDir = '/usr/local/lib/node_modules/claude-flow/.claude/skills'; // Global npm install\n\n  let sourceSkillsDir;\n\n  // Try package location first (most common for npm installs), then local dev, then global npm\n  const locationsToTry = [\n    { path: packageSkillsDir, label: 'packaged skill files' },\n    { path: localSkillsDir, label: 'local development skill files' },\n    { path: globalNpmSkillsDir, label: 'global npm skill files' }\n  ];\n\n  for (const location of locationsToTry) {\n    try {\n      console.log(`  üîç Checking: ${location.path}`);\n      await fs.access(location.path);\n      // Verify it's actually a directory with skills\n      const items = await fs.readdir(location.path);\n      console.log(`  üìä Found ${items.length} items at ${location.path}`);\n      if (items.length > 0) {\n        sourceSkillsDir = location.path;\n        console.log(`  üìÅ Using ${location.label}`);\n        console.log(`  üìç Path: ${location.path}`);\n        break;\n      }\n    } catch (err) {\n      console.log(`  ‚ùå Failed to access ${location.path}: ${err.message}`);\n      // Try next location\n      continue;\n    }\n  }\n\n  if (!sourceSkillsDir) {\n    console.log('  ‚ö†Ô∏è  No skill files found in any location');\n    console.log('  üîç Searched locations:');\n    locationsToTry.forEach(loc => console.log(`     - ${loc.path}`));\n    return { success: false, error: 'Skill files not found' };\n  }\n\n  const targetSkillsDir = join(targetDir, '.claude/skills');\n\n  console.log('üìÅ Copying skill system files...');\n  console.log(`  üìÇ Source: ${sourceSkillsDir}`);\n  console.log(`  üìÇ Target: ${targetSkillsDir}`);\n\n  try {\n    // Create target directory\n    if (!dryRun) {\n      await fs.mkdir(targetSkillsDir, { recursive: true });\n    }\n\n    const copiedFiles = [];\n    const errors = [];\n\n    // Recursively copy all skill files\n    async function copyRecursive(srcDir, destDir) {\n      const items = await fs.readdir(srcDir, { withFileTypes: true });\n\n      for (const item of items) {\n        const srcPath = join(srcDir, item.name);\n        const destPath = join(destDir, item.name);\n\n        if (item.isDirectory()) {\n          if (!dryRun) {\n            await fs.mkdir(destPath, { recursive: true });\n          }\n          await copyRecursive(srcPath, destPath);\n        } else if (item.isFile() && item.name.endsWith('.md')) {\n          try {\n            // Check if file already exists\n            let shouldCopy = force;\n            if (!force) {\n              try {\n                await fs.access(destPath);\n                // File exists, skip unless force is true\n                continue;\n              } catch {\n                // File doesn't exist, safe to copy\n                shouldCopy = true;\n              }\n            }\n\n            if (shouldCopy && !dryRun) {\n              const content = await fs.readFile(srcPath, 'utf8');\n              await fs.writeFile(destPath, content, 'utf8');\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            } else if (dryRun) {\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            }\n          } catch (err) {\n            errors.push(`Failed to copy ${item.name}: ${err.message}`);\n          }\n        }\n      }\n    }\n\n    await copyRecursive(sourceSkillsDir, targetSkillsDir);\n\n    if (!dryRun && copiedFiles.length > 0) {\n      console.log(`  ‚úÖ Copied ${copiedFiles.length} skill files`);\n      console.log('  üìã Skill system initialized');\n      console.log('  üéØ Available skills: skill-builder');\n    } else if (dryRun) {\n      console.log(`  [DRY RUN] Would copy ${copiedFiles.length} skill files`);\n    }\n\n    if (errors.length > 0) {\n      console.log('  ‚ö†Ô∏è  Some skill files could not be copied:');\n      errors.forEach(error => console.log(`    - ${error}`));\n    }\n\n    return {\n      success: true,\n      copiedFiles,\n      errors,\n      totalSkills: copiedFiles.filter(f => f.includes('SKILL.md')).length\n    };\n\n  } catch (err) {\n    console.log(`  ‚ùå Failed to copy skill files: ${err.message}`);\n    return {\n      success: false,\n      error: err.message,\n      copiedFiles: [],\n      errors: [err.message]\n    };\n  }\n}\n\n/**\n * Create skill directories structure\n */\nexport async function createSkillDirectories(targetDir, dryRun = false) {\n  const skillDirs = [\n    '.claude/skills',\n  ];\n\n  if (dryRun) {\n    console.log(`  [DRY RUN] Would create ${skillDirs.length} skill directories`);\n    return;\n  }\n\n  for (const dir of skillDirs) {\n    await fs.mkdir(join(targetDir, dir), { recursive: true });\n  }\n\n  console.log(`  ‚úÖ Created ${skillDirs.length} skill directories`);\n}\n\n/**\n * Validate skill system after copying\n */\nexport async function validateSkillSystem(targetDir) {\n  const skillsDir = join(targetDir, '.claude/skills');\n\n  try {\n    const items = await fs.readdir(skillsDir, { withFileTypes: true });\n    const skillDirs = items.filter(item => item.isDirectory());\n\n    let totalSkills = 0;\n    const skillNames = [];\n\n    for (const skillDir of skillDirs) {\n      const skillPath = join(skillsDir, skillDir.name);\n      const skillMdPath = join(skillPath, 'SKILL.md');\n\n      try {\n        await fs.access(skillMdPath);\n        totalSkills++;\n        skillNames.push(skillDir.name);\n      } catch {\n        // No SKILL.md, not a valid skill\n      }\n    }\n\n    console.log('  üîç Skill system validation:');\n    console.log(`    ‚Ä¢ Total skills: ${totalSkills}`);\n    console.log(`    ‚Ä¢ Skills: ${skillNames.join(', ')}`);\n\n    return {\n      valid: totalSkills > 0, // Should have at least 1 skill\n      totalSkills,\n      skillNames\n    };\n\n  } catch (err) {\n    console.log(`  ‚ö†Ô∏è  Skill system validation failed: ${err.message}`);\n    return {\n      valid: false,\n      error: err.message\n    };\n  }\n}\n"],"names":["promises","fs","join","dirname","fileURLToPath","__filename","url","__dirname","copySkillFiles","targetDir","options","console","log","force","dryRun","packageSkillsDir","localSkillsDir","globalNpmSkillsDir","sourceSkillsDir","locationsToTry","path","label","location","access","items","readdir","length","err","message","forEach","loc","success","error","targetSkillsDir","mkdir","recursive","copiedFiles","errors","copyRecursive","srcDir","destDir","withFileTypes","item","srcPath","name","destPath","isDirectory","isFile","endsWith","shouldCopy","content","readFile","writeFile","push","replace","totalSkills","filter","f","includes","createSkillDirectories","skillDirs","dir","validateSkillSystem","skillsDir","skillNames","skillDir","skillPath","skillMdPath","valid"],"mappings":"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"}