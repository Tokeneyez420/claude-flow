{"version":3,"sources":["../../../../../src/cli/simple-commands/init/index.js"],"sourcesContent":["// init/index.js - Initialize Claude Code integration files\nimport { printSuccess, printError, printWarning, exit } from '../../utils.js';\nimport { existsSync } from 'fs';\nimport process from 'process';\nimport os from 'os';\nimport { spawn, execSync } from 'child_process';\nimport { promisify } from 'util';\n\n// Helper to replace Deno.Command\nfunction runCommand(command, args, options = {}) {\n  return new Promise((resolve, reject) => {\n    const child = spawn(command, args, {\n      cwd: options.cwd,\n      env: { ...process.env, ...options.env },\n      stdio: options.stdout === 'inherit' ? 'inherit' : 'pipe'\n    });\n    \n    let stdout = '';\n    let stderr = '';\n    \n    if (options.stdout !== 'inherit') {\n      child.stdout.on('data', (data) => { stdout += data; });\n      child.stderr.on('data', (data) => { stderr += data; });\n    }\n    \n    child.on('close', (code) => {\n      if (code === 0) {\n        resolve({ success: true, code, stdout, stderr });\n      } else {\n        reject(new Error(`Command failed with exit code ${code}`));\n      }\n    });\n    \n    child.on('error', reject);\n  });\n}\nimport { createLocalExecutable } from './executable-wrapper.js';\nimport { createSparcStructureManually } from './sparc-structure.js';\nimport { createClaudeSlashCommands } from './claude-commands/slash-commands.js';\nimport { createOptimizedClaudeSlashCommands } from './claude-commands/optimized-slash-commands.js';\n// execSync imported above as execSyncOriginal\\nconst execSync = execSyncOriginal;\nimport { promises as fs } from 'fs';\nimport { copyTemplates } from './template-copier.js';\nimport { copyRevisedTemplates, validateTemplatesExist } from './copy-revised-templates.js';\nimport { copyAgentFiles, createAgentDirectories, validateAgentSystem, copyCommandFiles } from './agent-copier.js';\nimport { copySkillFiles, createSkillDirectories, validateSkillSystem } from './skills-copier.js';\nimport { showInitHelp } from './help.js';\nimport { batchInitCommand, batchInitFromConfig, validateBatchOptions } from './batch-init.js';\nimport { ValidationSystem, runFullValidation } from './validation/index.js';\nimport { RollbackSystem, createAtomicOperation } from './rollback/index.js';\nimport {\n  createEnhancedClaudeMd,\n  createEnhancedSettingsJson,\n  createWrapperScript,\n  createCommandDoc,\n  createHelperScript,\n  COMMAND_STRUCTURE,\n} from './templates/enhanced-templates.js';\nimport { createOptimizedSparcClaudeMd } from './templates/claude-md.js';\nimport { getIsolatedNpxEnv } from '../../../utils/npx-isolated-cache.js';\nimport { updateGitignore, needsGitignoreUpdate } from './gitignore-updater.js';\nimport {\n  createFullClaudeMd,\n  createSparcClaudeMd,\n  createMinimalClaudeMd,\n} from './templates/claude-md.js';\nimport {\n  createVerificationClaudeMd,\n  createVerificationSettingsJson,\n} from './templates/verification-claude-md.js';\nimport {\n  createFullMemoryBankMd,\n  createMinimalMemoryBankMd,\n} from './templates/memory-bank-md.js';\nimport {\n  createFullCoordinationMd,\n  createMinimalCoordinationMd,\n} from './templates/coordination-md.js';\nimport { createAgentsReadme, createSessionsReadme } from './templates/readme-files.js';\nimport { \n  initializeHiveMind, \n  getHiveMindStatus,\n  rollbackHiveMindInit\n} from './hive-mind-init.js';\n\n/**\n * Check if Claude Code CLI is installed\n */\nfunction isClaudeCodeInstalled() {\n  try {\n    execSync('which claude', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Set up MCP servers in Claude Code\n */\nasync function setupMcpServers(dryRun = false) {\n  console.log('\\n🔌 Setting up MCP servers for Claude Code...');\n\n  const servers = [\n    {\n      name: 'claude-flow',\n      command: 'npx claude-flow@alpha mcp start',\n      description: 'Claude Flow MCP server with swarm orchestration (alpha)',\n    },\n    {\n      name: 'ruv-swarm',\n      command: 'npx ruv-swarm mcp start',\n      description: 'ruv-swarm MCP server for enhanced coordination',\n    },\n    {\n      name: 'flow-nexus',\n      command: 'npx flow-nexus@latest mcp start',\n      description: 'Flow Nexus Complete MCP server for advanced AI orchestration',\n    },\n    {\n      name: 'agentic-payments',\n      command: 'npx agentic-payments@latest mcp',\n      description: 'Agentic Payments MCP server for autonomous agent payment authorization',\n    },\n  ];\n\n  for (const server of servers) {\n    try {\n      if (!dryRun) {\n        console.log(`  🔄 Adding ${server.name}...`);\n        execSync(`claude mcp add ${server.name} ${server.command}`, { stdio: 'inherit' });\n        console.log(`  ✅ Added ${server.name} - ${server.description}`);\n      } else {\n        console.log(`  [DRY RUN] Would add ${server.name} - ${server.description}`);\n      }\n    } catch (err) {\n      console.log(`  ⚠️  Failed to add ${server.name}: ${err.message}`);\n      console.log(\n        `     You can add it manually with: claude mcp add ${server.name} ${server.command}`,\n      );\n    }\n  }\n\n  if (!dryRun) {\n    console.log('\\n  📋 Verifying MCP servers...');\n    try {\n      execSync('claude mcp list', { stdio: 'inherit' });\n    } catch (err) {\n      console.log('  ⚠️  Could not verify MCP servers');\n    }\n  }\n}\n\n/**\n * Create statusline script content (embedded fallback for binary builds)\n */\nfunction createStatuslineScript() {\n  return `\n#!/bin/bash\n\n# Read JSON input from stdin\nINPUT=$(cat)\nMODEL=$(echo \"$INPUT\" | jq -r \\'.model.display_name // \"Claude\"\\')\nCWD=$(echo \"$INPUT\" | jq -r \\'.workspace.current_dir // .cwd\\')\nDIR=$(basename \"$CWD\")\n\n# Replace claude-code-flow with branded name\nif [ \"$DIR\" = \"claude-code-flow\" ]; then\n  DIR=\"🌊 Claude Flow\"\nfi\n\n# Get git branch\nBRANCH=$(cd \"$CWD\" 2>/dev/null && git branch --show-current 2>/dev/null)\n\n# Start building statusline\nprintf \"\\\\033[1m$MODEL\\\\033[0m in \\\\033[36m$DIR\\\\033[0m\"\n[ -n \"$BRANCH\" ] && printf \" on \\\\033[33m⎇ $BRANCH\\\\033[0m\"\n\n# Claude-Flow integration\nFLOW_DIR=\"$CWD/.claude-flow\"\n\nif [ -d \"$FLOW_DIR\" ]; then\n  printf \" │\"\n\n  # 1. Swarm Configuration & Topology\n  if [ -f \"$FLOW_DIR/swarm-config.json\" ]; then\n    STRATEGY=$(jq -r \\'.defaultStrategy // empty\\' \"$FLOW_DIR/swarm-config.json\" 2>/dev/null)\n    if [ -n \"$STRATEGY\" ]; then\n      # Map strategy to topology icon\n      case \"$STRATEGY\" in\n        \"balanced\") TOPO_ICON=\"⚡mesh\" ;;\n        \"conservative\") TOPO_ICON=\"⚡hier\" ;;\n        \"aggressive\") TOPO_ICON=\"⚡ring\" ;;\n        *) TOPO_ICON=\"⚡$STRATEGY\" ;;\n      esac\n      printf \" \\\\033[35m$TOPO_ICON\\\\033[0m\"\n\n      # Count agent profiles as \"configured agents\"\n      AGENT_COUNT=$(jq -r \\'.agentProfiles | length\\' \"$FLOW_DIR/swarm-config.json\" 2>/dev/null)\n      if [ -n \"$AGENT_COUNT\" ] && [ \"$AGENT_COUNT\" != \"null\" ] && [ \"$AGENT_COUNT\" -gt 0 ]; then\n        printf \"  \\\\033[35m🤖 $AGENT_COUNT\\\\033[0m\"\n      fi\n    fi\n  fi\n\n  # 2. Real-time System Metrics\n  if [ -f \"$FLOW_DIR/metrics/system-metrics.json\" ]; then\n    # Get latest metrics (last entry in array)\n    LATEST=$(jq -r \\'.[-1]\\' \"$FLOW_DIR/metrics/system-metrics.json\" 2>/dev/null)\n\n    if [ -n \"$LATEST\" ] && [ \"$LATEST\" != \"null\" ]; then\n      # Memory usage\n      MEM_PERCENT=$(echo \"$LATEST\" | jq -r \\'.memoryUsagePercent // 0\\' | awk \\'{printf \"%.0f\", $1}\\')\n      if [ -n \"$MEM_PERCENT\" ] && [ \"$MEM_PERCENT\" != \"null\" ]; then\n        # Color-coded memory (green <60%, yellow 60-80%, red >80%)\n        if [ \"$MEM_PERCENT\" -lt 60 ]; then\n          MEM_COLOR=\"\\\\033[32m\"  # Green\n        elif [ \"$MEM_PERCENT\" -lt 80 ]; then\n          MEM_COLOR=\"\\\\033[33m\"  # Yellow\n        else\n          MEM_COLOR=\"\\\\033[31m\"  # Red\n        fi\n        printf \"  \\${MEM_COLOR}💾 \\${MEM_PERCENT}%\\\\033[0m\"\n      fi\n\n      # CPU load\n      CPU_LOAD=$(echo \"$LATEST\" | jq -r \\'.cpuLoad // 0\\' | awk \\'{printf \"%.0f\", $1 * 100}\\')\n      if [ -n \"$CPU_LOAD\" ] && [ \"$CPU_LOAD\" != \"null\" ]; then\n        # Color-coded CPU (green <50%, yellow 50-75%, red >75%)\n        if [ \"$CPU_LOAD\" -lt 50 ]; then\n          CPU_COLOR=\"\\\\033[32m\"  # Green\n        elif [ \"$CPU_LOAD\" -lt 75 ]; then\n          CPU_COLOR=\"\\\\033[33m\"  # Yellow\n        else\n          CPU_COLOR=\"\\\\033[31m\"  # Red\n        fi\n        printf \"  \\${CPU_COLOR}⚙ \\${CPU_LOAD}%\\\\033[0m\"\n      fi\n    fi\n  fi\n\n  # 3. Session State\n  if [ -f \"$FLOW_DIR/session-state.json\" ]; then\n    SESSION_ID=$(jq -r \\'.sessionId // empty\\' \"$FLOW_DIR/session-state.json\" 2>/dev/null)\n    ACTIVE=$(jq -r \\'.active // false\\' \"$FLOW_DIR/session-state.json\" 2>/dev/null)\n\n    if [ \"$ACTIVE\" = \"true\" ] && [ -n \"$SESSION_ID\" ]; then\n      # Show abbreviated session ID\n      SHORT_ID=$(echo \"$SESSION_ID\" | cut -d\\'-\\' -f1)\n      printf \"  \\\\033[34m🔄 $SHORT_ID\\\\033[0m\"\n    fi\n  fi\n\n  # 4. Performance Metrics from task-metrics.json\n  if [ -f \"$FLOW_DIR/metrics/task-metrics.json\" ]; then\n    # Parse task metrics for success rate, avg time, and streak\n    METRICS=$(jq -r \\'\n      # Calculate metrics\n      (map(select(.success == true)) | length) as $successful |\n      (length) as $total |\n      (if $total > 0 then ($successful / $total * 100) else 0 end) as $success_rate |\n      (map(.duration // 0) | add / length) as $avg_duration |\n      # Calculate streak (consecutive successes from end)\n      (reverse |\n        reduce .[] as $task (0;\n          if $task.success == true then . + 1 else 0 end\n        )\n      ) as $streak |\n      {\n        success_rate: $success_rate,\n        avg_duration: $avg_duration,\n        streak: $streak,\n        total: $total\n      } | @json\n    \\' \"$FLOW_DIR/metrics/task-metrics.json\" 2>/dev/null)\n\n    if [ -n \"$METRICS\" ] && [ \"$METRICS\" != \"null\" ]; then\n      # Success Rate\n      SUCCESS_RATE=$(echo \"$METRICS\" | jq -r \\'.success_rate // 0\\' | awk \\'{printf \"%.0f\", $1}\\')\n      TOTAL_TASKS=$(echo \"$METRICS\" | jq -r \\'.total // 0\\')\n\n      if [ -n \"$SUCCESS_RATE\" ] && [ \"$TOTAL_TASKS\" -gt 0 ]; then\n        # Color-code: Green (>80%), Yellow (60-80%), Red (<60%)\n        if [ \"$SUCCESS_RATE\" -gt 80 ]; then\n          SUCCESS_COLOR=\"\\\\033[32m\"  # Green\n        elif [ \"$SUCCESS_RATE\" -ge 60 ]; then\n          SUCCESS_COLOR=\"\\\\033[33m\"  # Yellow\n        else\n          SUCCESS_COLOR=\"\\\\033[31m\"  # Red\n        fi\n        printf \"  \\${SUCCESS_COLOR}🎯 \\${SUCCESS_RATE}%\\\\033[0m\"\n      fi\n\n      # Average Time\n      AVG_TIME=$(echo \"$METRICS\" | jq -r \\'.avg_duration // 0\\')\n      if [ -n \"$AVG_TIME\" ] && [ \"$TOTAL_TASKS\" -gt 0 ]; then\n        # Format smartly: seconds, minutes, or hours\n        if [ $(echo \"$AVG_TIME < 60\" | bc -l 2>/dev/null || echo 0) -eq 1 ]; then\n          TIME_STR=$(echo \"$AVG_TIME\" | awk \\'{printf \"%.1fs\", $1}\\')\n        elif [ $(echo \"$AVG_TIME < 3600\" | bc -l 2>/dev/null || echo 0) -eq 1 ]; then\n          TIME_STR=$(echo \"$AVG_TIME\" | awk \\'{printf \"%.1fm\", $1/60}\\')\n        else\n          TIME_STR=$(echo \"$AVG_TIME\" | awk \\'{printf \"%.1fh\", $1/3600}\\')\n        fi\n        printf \"  \\\\033[36m⏱️  $TIME_STR\\\\033[0m\"\n      fi\n\n      # Streak (only show if > 0)\n      STREAK=$(echo \"$METRICS\" | jq -r \\'.streak // 0\\')\n      if [ -n \"$STREAK\" ] && [ \"$STREAK\" -gt 0 ]; then\n        printf \"  \\\\033[91m🔥 $STREAK\\\\033[0m\"\n      fi\n    fi\n  fi\n\n  # 5. Active Tasks (check for task files)\n  if [ -d \"$FLOW_DIR/tasks\" ]; then\n    TASK_COUNT=$(find \"$FLOW_DIR/tasks\" -name \"*.json\" -type f 2>/dev/null | wc -l)\n    if [ \"$TASK_COUNT\" -gt 0 ]; then\n      printf \"  \\\\033[36m📋 $TASK_COUNT\\\\033[0m\"\n    fi\n  fi\n\n  # 6. Check for hooks activity\n  if [ -f \"$FLOW_DIR/hooks-state.json\" ]; then\n    HOOKS_ACTIVE=$(jq -r \\'.enabled // false\\' \"$FLOW_DIR/hooks-state.json\" 2>/dev/null)\n    if [ \"$HOOKS_ACTIVE\" = \"true\" ]; then\n      printf \" \\\\033[35m🔗\\\\033[0m\"\n    fi\n  fi\nfi\n\necho\n`;\n}\n\nexport async function initCommand(subArgs, flags) {\n  // Show help if requested\n  if (flags.help || flags.h || subArgs.includes('--help') || subArgs.includes('-h')) {\n    showInitHelp();\n    return;\n  }\n\n  // Handle --env flag for .env template generation\n  if (flags.env || subArgs.includes('--env')) {\n    const { generateEnvTemplate } = await import('../env-template.js');\n    const workingDir = process.env.PWD || process.cwd();\n    const force = flags.force || flags.f;\n\n    console.log('📋 Generating .env template file...\\n');\n    const result = await generateEnvTemplate(workingDir, force);\n\n    if (result.created) {\n      console.log('\\n📚 Next steps:');\n      console.log('1. Open .env file and add your API keys');\n      console.log('2. Get keys from:');\n      console.log('   • Anthropic: https://console.anthropic.com/settings/keys');\n      console.log('   • OpenRouter: https://openrouter.ai/keys');\n      console.log('3. Enable memory: claude-flow agent run coder \"task\" --enable-memory\\n');\n      console.log('💡 See docs/REASONINGBANK-COST-OPTIMIZATION.md for cost savings tips');\n    } else if (result.exists) {\n      console.log('💡 To overwrite: claude-flow init --env --force');\n    }\n\n    return;\n  }\n\n  // Check for verification flags first\n  const hasVerificationFlags = subArgs.includes('--verify') || subArgs.includes('--pair') ||\n                               flags.verify || flags.pair;\n\n  // Handle Flow Nexus minimal init\n  if (flags['flow-nexus']) {\n    return await flowNexusMinimalInit(flags, subArgs);\n  }\n\n  // Default to enhanced Claude Flow v2 init unless other modes are specified\n  // Use --basic flag for old behavior, or verification flags for verification mode\n  if (!flags.basic && !flags.minimal && !flags.sparc && !hasVerificationFlags) {\n    return await enhancedClaudeFlowInit(flags, subArgs);\n  }\n\n  // Check for validation and rollback commands\n  if (subArgs.includes('--validate') || subArgs.includes('--validate-only')) {\n    return handleValidationCommand(subArgs, flags);\n  }\n\n  if (subArgs.includes('--rollback')) {\n    return handleRollbackCommand(subArgs, flags);\n  }\n\n  if (subArgs.includes('--list-backups')) {\n    return handleListBackups(subArgs, flags);\n  }\n\n  // Check for batch operations\n  const batchInitFlag = flags['batch-init'] || subArgs.includes('--batch-init');\n  const configFlag = flags.config || subArgs.includes('--config');\n\n  if (batchInitFlag || configFlag) {\n    return handleBatchInit(subArgs, flags);\n  }\n\n  // Check if enhanced initialization is requested\n  const useEnhanced = subArgs.includes('--enhanced') || subArgs.includes('--safe');\n\n  if (useEnhanced) {\n    return enhancedInitCommand(subArgs, flags);\n  }\n\n  // Parse init options\n  const initForce = subArgs.includes('--force') || subArgs.includes('-f') || flags.force;\n  const initMinimal = subArgs.includes('--minimal') || subArgs.includes('-m') || flags.minimal;\n  const initSparc = flags.roo || (subArgs && subArgs.includes('--roo')); // SPARC only with --roo flag\n  const initDryRun = subArgs.includes('--dry-run') || subArgs.includes('-d') || flags.dryRun;\n  const initOptimized = initSparc && initForce; // Use optimized templates when both flags are present\n  const selectedModes = flags.modes ? flags.modes.split(',') : null; // Support selective mode initialization\n  \n  // Check for verification and pair programming flags\n  const initVerify = subArgs.includes('--verify') || flags.verify;\n  const initPair = subArgs.includes('--pair') || flags.pair;\n\n  // Get the actual working directory (where the command was run from)\n  // Use PWD environment variable which preserves the original directory\n  const workingDir = process.env.PWD || cwd();\n  console.log(`📁 Initializing in: ${workingDir}`);\n\n  // Change to the working directory to ensure all file operations happen there\n  try {\n    process.chdir(workingDir);\n  } catch (err) {\n    printWarning(`Could not change to directory ${workingDir}: ${err.message}`);\n  }\n\n  try {\n    printSuccess('Initializing Claude Code integration files...');\n\n    // Check if files already exist in the working directory\n    const files = ['CLAUDE.md', 'memory-bank.md', 'coordination.md'];\n    const existingFiles = [];\n\n    for (const file of files) {\n      try {\n        await fs.stat(`${workingDir}/${file}`);\n        existingFiles.push(file);\n      } catch {\n        // File doesn't exist, which is what we want\n      }\n    }\n\n    if (existingFiles.length > 0 && !initForce) {\n      printWarning(`The following files already exist: ${existingFiles.join(', ')}`);\n      console.log('Use --force to overwrite existing files');\n      return;\n    }\n\n    // Use template copier to copy all template files\n    const templateOptions = {\n      sparc: initSparc,\n      minimal: initMinimal,\n      optimized: initOptimized,\n      dryRun: initDryRun,\n      force: initForce,\n      selectedModes: selectedModes,\n      verify: initVerify,\n      pair: initPair,\n    };\n\n    // If verification flags are set, always use generated templates for CLAUDE.md and settings.json\n    if (initVerify || initPair) {\n      console.log('  📁 Creating verification-focused configuration...');\n      \n      // Create verification CLAUDE.md\n      if (!initDryRun) {\n        const { createVerificationClaudeMd, createVerificationSettingsJson } = await import('./templates/verification-claude-md.js');\n        await fs.writeFile(`${workingDir}/CLAUDE.md`, createVerificationClaudeMd(), 'utf8');\n        \n        // Create .claude directory and settings\n        await fs.mkdir(`${workingDir}/.claude`, { recursive: true });\n        await fs.writeFile(`${workingDir}/.claude/settings.json`, createVerificationSettingsJson(), 'utf8');\n        console.log('  ✅ Created verification-focused CLAUDE.md and settings.json');\n      } else {\n        console.log('  [DRY RUN] Would create verification-focused CLAUDE.md and settings.json');\n      }\n      \n      // Copy other template files from repository if available\n      const validation = validateTemplatesExist();\n      if (validation.valid) {\n        const revisedResults = await copyRevisedTemplates(workingDir, {\n          force: initForce,\n          dryRun: initDryRun,\n          verbose: false,\n          sparc: initSparc\n        });\n      }\n      \n      // Also create standard memory and coordination files\n      const copyResults = await copyTemplates(workingDir, {\n        ...templateOptions,\n        skipClaudeMd: true,  // Don't overwrite the verification CLAUDE.md\n        skipSettings: true   // Don't overwrite the verification settings.json\n      });\n      \n    } else {\n      // Standard template copying logic\n      const validation = validateTemplatesExist();\n      if (validation.valid) {\n        console.log('  📁 Copying revised template files...');\n        const revisedResults = await copyRevisedTemplates(workingDir, {\n          force: initForce,\n          dryRun: initDryRun,\n          verbose: true,\n          sparc: initSparc\n        });\n\n        if (revisedResults.success) {\n          console.log(`  ✅ Copied ${revisedResults.copiedFiles.length} template files`);\n          if (revisedResults.skippedFiles.length > 0) {\n            console.log(`  ⏭️  Skipped ${revisedResults.skippedFiles.length} existing files`);\n          }\n        } else {\n          console.log('  ⚠️  Some template files could not be copied:');\n          revisedResults.errors.forEach(err => console.log(`    - ${err}`));\n        }\n      } else {\n        // Fall back to generated templates\n        console.log('  ⚠️  Revised templates not available, using generated templates');\n        const copyResults = await copyTemplates(workingDir, templateOptions);\n\n        if (!copyResults.success) {\n          printError('Failed to copy templates:');\n          copyResults.errors.forEach(err => console.log(`  ❌ ${err}`));\n          return;\n        }\n      }\n    }\n\n    // Agent setup moved to end of function where execution is guaranteed\n\n    // Directory structure is created by template copier\n\n    // SPARC files are created by template copier when --sparc flag is used\n\n    // Memory README files and persistence database are created by template copier\n\n    // Create local claude-flow@alpha executable wrapper\n    if (!initDryRun) {\n      await createLocalExecutable(workingDir);\n    } else {\n      console.log('  [DRY RUN] Would create local claude-flow@alpha executable wrapper');\n    }\n\n    // SPARC initialization\n    if (initSparc) {\n      console.log('\\n🚀 Initializing SPARC development environment...');\n\n      if (initDryRun) {\n        console.log('  [DRY RUN] Would run: npx -y create-sparc init --force');\n        console.log('  [DRY RUN] Would create SPARC environment with all modes');\n        console.log(\n          '  [DRY RUN] Would create Claude slash commands' +\n            (initOptimized ? ' (Batchtools-optimized)' : ''),\n        );\n        if (selectedModes) {\n          console.log(\n            `  [DRY RUN] Would create commands for selected modes: ${selectedModes.join(', ')}`,\n          );\n        }\n      } else {\n        // Check if create-sparc exists and run it\n        let sparcInitialized = false;\n        try {\n          // Use isolated NPX cache to prevent concurrent conflicts\n          console.log('  🔄 Running: npx -y create-sparc init --force');\n          const createSparcResult = await runCommand('npx', ['-y', 'create-sparc', 'init', '--force'], {\n            cwd: workingDir,\n            stdout: 'inherit',\n            stderr: 'inherit',\n            env: getIsolatedNpxEnv({\n              PWD: workingDir,\n            }),\n          });\n\n          if (createSparcResult.success) {\n            console.log('  ✅ SPARC environment initialized successfully');\n            sparcInitialized = true;\n          } else {\n            printWarning('create-sparc failed, creating basic SPARC structure manually...');\n\n            // Fallback: create basic SPARC structure manually\n            await createSparcStructureManually();\n            sparcInitialized = true; // Manual creation still counts as initialized\n          }\n        } catch (err) {\n          printWarning('create-sparc not available, creating basic SPARC structure manually...');\n\n          // Fallback: create basic SPARC structure manually\n          await createSparcStructureManually();\n          sparcInitialized = true; // Manual creation still counts as initialized\n        }\n\n        // Always create Claude slash commands after SPARC initialization\n        if (sparcInitialized) {\n          try {\n            if (initOptimized) {\n              await createOptimizedClaudeSlashCommands(workingDir, selectedModes);\n            } else {\n              await createClaudeSlashCommands(workingDir);\n            }\n          } catch (err) {\n            // Legacy slash command creation - silently skip if it fails\n            // SPARC slash commands are already created successfully above\n          }\n        }\n      }\n    }\n\n    if (initDryRun) {\n      printSuccess(\"🔍 Dry run completed! Here's what would be created:\");\n      console.log('\\n📋 Summary of planned initialization:');\n      console.log(\n        `  • Configuration: ${initOptimized ? 'Batchtools-optimized SPARC' : initSparc ? 'SPARC-enhanced' : 'Standard'}`,\n      );\n      console.log(\n        `  • Template type: ${initOptimized ? 'Optimized for parallel processing' : 'Standard'}`,\n      );\n      console.log('  • Core files: CLAUDE.md, memory-bank.md, coordination.md');\n      console.log('  • Directory structure: memory/, coordination/, .claude/');\n      console.log('  • Local executable: ./claude-flow@alpha');\n      if (initSparc) {\n        console.log(\n          `  • Claude Code slash commands: ${selectedModes ? selectedModes.length : 'All'} SPARC mode commands`,\n        );\n        console.log('  • SPARC environment with all development modes');\n      }\n      if (initOptimized) {\n        console.log('  • Batchtools optimization: Enabled for parallel processing');\n        console.log('  • Performance enhancements: Smart batching, concurrent operations');\n      }\n      console.log('\\n🚀 To proceed with initialization, run the same command without --dry-run');\n    } else {\n      printSuccess('🎉 Claude Code integration files initialized successfully!');\n\n      if (initOptimized) {\n        console.log('\\n⚡ Batchtools Optimization Enabled!');\n        console.log('  • Parallel processing capabilities activated');\n        console.log('  • Performance improvements: 250-500% faster operations');\n        console.log('  • Smart batching and concurrent operations available');\n      }\n\n      console.log('\\n📋 What was created:');\n      console.log(\n        `  ✅ CLAUDE.md (${initOptimized ? 'Batchtools-optimized' : initSparc ? 'SPARC-enhanced' : 'Standard configuration'})`,\n      );\n      console.log(\n        `  ✅ memory-bank.md (${initOptimized ? 'With parallel processing' : 'Standard memory system'})`,\n      );\n      console.log(\n        `  ✅ coordination.md (${initOptimized ? 'Enhanced with batchtools' : 'Standard coordination'})`,\n      );\n      console.log('  ✅ Directory structure with memory/ and coordination/');\n      console.log('  ✅ Local executable at ./claude-flow@alpha');\n      console.log('  ✅ Persistence database at memory/claude-flow@alpha-data.json');\n      console.log('  ✅ Agent system with 64 specialized agents in .claude/agents/');\n\n      if (initSparc) {\n        const modeCount = selectedModes ? selectedModes.length : '20+';\n        console.log(`  ✅ Claude Code slash commands (${modeCount} SPARC modes)`);\n        console.log('  ✅ Complete SPARC development environment');\n      }\n\n      console.log('\\n🚀 Next steps:');\n      console.log('1. Review and customize the generated files for your project');\n      console.log(\"2. Run './claude-flow@alpha start' to begin the orchestration system\");\n      console.log(\"3. Use './claude-flow@alpha' instead of 'npx claude-flow@alpha' for all commands\");\n      console.log(\"4. Use 'claude --dangerously-skip-permissions' for unattended operation\");\n\n      if (initSparc) {\n        console.log(\n          '5. Use Claude Code slash commands: /sparc, /sparc-architect, /sparc-tdd, etc.',\n        );\n        console.log(\"6. Explore SPARC modes with './claude-flow@alpha sparc modes'\");\n        console.log('7. Try TDD workflow with \\'./claude-flow@alpha sparc tdd \"your task\"\\'');\n\n        if (initOptimized) {\n          console.log('8. Use batchtools commands: /batchtools, /performance for optimization');\n          console.log('9. Enable parallel processing with --parallel flags');\n          console.log(\"10. Monitor performance with './claude-flow@alpha performance monitor'\");\n        }\n      }\n\n      // Update .gitignore\n      const gitignoreResult = await updateGitignore(workingDir, initForce, initDryRun);\n      if (gitignoreResult.success) {\n        if (!initDryRun) {\n          console.log(`  ✅ ${gitignoreResult.message}`);\n        } else {\n          console.log(`  ${gitignoreResult.message}`);\n        }\n      } else {\n        console.log(`  ⚠️  ${gitignoreResult.message}`);\n      }\n\n      console.log('\\n💡 Tips:');\n      console.log(\"  • Type '/' in Claude Code to see all available slash commands\");\n      console.log(\"  • Use './claude-flow@alpha status' to check system health\");\n      console.log(\"  • Store important context with './claude-flow@alpha memory store'\");\n\n      if (initOptimized) {\n        console.log('  • Use --parallel flags for concurrent operations');\n        console.log('  • Enable batch processing for multiple related tasks');\n        console.log('  • Monitor performance with real-time metrics');\n      }\n\n      // Initialize hive-mind system for standard init\n      console.log('\\n🧠 Initializing basic hive-mind system...');\n      try {\n        const hiveMindOptions = {\n          config: {\n            integration: {\n              claudeCode: { enabled: isClaudeCodeInstalled() },\n              mcpTools: { enabled: true }\n            },\n            monitoring: { enabled: false } // Basic setup for standard init\n          }\n        };\n        \n        const hiveMindResult = await initializeHiveMind(workingDir, hiveMindOptions, false);\n        \n        if (hiveMindResult.success) {\n          console.log('  ✅ Basic hive-mind system initialized');\n          console.log('  💡 Use \"npx claude-flow@alpha hive-mind\" for advanced features');\n        } else {\n          console.log(`  ⚠️  Hive-mind setup skipped: ${hiveMindResult.error}`);\n        }\n      } catch (err) {\n        console.log(`  ⚠️  Hive-mind setup skipped: ${err.message}`);\n      }\n\n      // Check for Claude Code and set up MCP servers (always enabled by default)\n      if (!initDryRun && isClaudeCodeInstalled()) {\n        console.log('\\n🔍 Claude Code CLI detected!');\n        const skipMcp = subArgs && subArgs.includes && subArgs.includes('--skip-mcp');\n\n        if (!skipMcp) {\n          await setupMcpServers(initDryRun);\n        } else {\n          console.log('  ℹ️  Skipping MCP setup (--skip-mcp flag used)');\n        }\n      } else if (!initDryRun && !isClaudeCodeInstalled()) {\n        console.log('\\n⚠️  Claude Code CLI not detected!');\n        console.log('  📥 Install with: npm install -g @anthropic-ai/claude-code');\n        console.log('  📋 Then add MCP servers manually with:');\n        console.log('     claude mcp add claude-flow npx claude-flow@alpha mcp start');\n        console.log('     claude mcp add ruv-swarm npx ruv-swarm mcp start');\n        console.log('     claude mcp add flow-nexus npx flow-nexus@latest mcp start');\n        console.log('     claude mcp add agentic-payments npx agentic-payments@latest mcp');\n      }\n    }\n  } catch (err) {\n    printError(`Failed to initialize files: ${err.message}`);\n  }\n}\n\n// Handle batch initialization\nasync function handleBatchInit(subArgs, flags) {\n  try {\n    // Options parsing from flags and subArgs\n    const options = {\n      parallel: !flags['no-parallel'] && flags.parallel !== false,\n      sparc: flags.sparc || flags.s,\n      minimal: flags.minimal || flags.m,\n      force: flags.force || flags.f,\n      maxConcurrency: flags['max-concurrent'] || 5,\n      progressTracking: true,\n      template: flags.template,\n      environments: flags.environments\n        ? flags.environments.split(',').map((env) => env.trim())\n        : ['dev'],\n    };\n\n    // Validate options\n    const validationErrors = validateBatchOptions(options);\n    if (validationErrors.length > 0) {\n      printError('Batch options validation failed:');\n      validationErrors.forEach((error) => console.error(`  - ${error}`));\n      return;\n    }\n\n    // Config file mode\n    if (flags.config) {\n      const configFile = flags.config;\n      printSuccess(`Loading batch configuration from: ${configFile}`);\n      const results = await batchInitFromConfig(configFile, options);\n      if (results) {\n        printSuccess('Batch initialization from config completed');\n      }\n      return;\n    }\n\n    // Batch init mode\n    if (flags['batch-init']) {\n      const projectsString = flags['batch-init'];\n      const projects = projectsString.split(',').map((project) => project.trim());\n\n      if (projects.length === 0) {\n        printError('No projects specified for batch initialization');\n        return;\n      }\n\n      printSuccess(`Initializing ${projects.length} projects in batch mode`);\n      const results = await batchInitCommand(projects, options);\n\n      if (results) {\n        const successful = results.filter((r) => r.success).length;\n        const failed = results.filter((r) => !r.success).length;\n\n        if (failed === 0) {\n          printSuccess(`All ${successful} projects initialized successfully`);\n        } else {\n          printWarning(`${successful} projects succeeded, ${failed} failed`);\n        }\n      }\n      return;\n    }\n\n    printError('No batch operation specified. Use --batch-init <projects> or --config <file>');\n  } catch (err) {\n    printError(`Batch initialization failed: ${err.message}`);\n  }\n}\n\n/**\n * Enhanced initialization command with validation and rollback\n */\nasync function enhancedInitCommand(subArgs, flags) {\n  console.log('🛡️  Starting enhanced initialization with validation and rollback...');\n\n  // Store parameters to avoid scope issues in async context\n  const args = subArgs || [];\n  const options = flags || {};\n\n  // Get the working directory\n  const workingDir = process.env.PWD || process.cwd();\n\n  // Initialize systems\n  const rollbackSystem = new RollbackSystem(workingDir);\n  const validationSystem = new ValidationSystem(workingDir);\n\n  let atomicOp = null;\n\n  try {\n    // Parse options\n    const initOptions = {\n      force: args.includes('--force') || args.includes('-f') || options.force,\n      minimal: args.includes('--minimal') || args.includes('-m') || options.minimal,\n      sparc: args.includes('--sparc') || args.includes('-s') || options.sparc,\n      skipPreValidation: args.includes('--skip-pre-validation'),\n      skipBackup: args.includes('--skip-backup'),\n      validateOnly: args.includes('--validate-only'),\n    };\n\n    // Phase 1: Pre-initialization validation\n    if (!initOptions.skipPreValidation) {\n      console.log('\\n🔍 Phase 1: Pre-initialization validation...');\n      const preValidation = await validationSystem.validatePreInit(initOptions);\n\n      if (!preValidation.success) {\n        printError('Pre-initialization validation failed:');\n        preValidation.errors.forEach((error) => console.error(`  ❌ ${error}`));\n        return;\n      }\n\n      if (preValidation.warnings.length > 0) {\n        printWarning('Pre-initialization warnings:');\n        preValidation.warnings.forEach((warning) => console.warn(`  ⚠️  ${warning}`));\n      }\n\n      printSuccess('Pre-initialization validation passed');\n    }\n\n    // Stop here if validation-only mode\n    if (options.validateOnly) {\n      console.log('\\n✅ Validation-only mode completed');\n      return;\n    }\n\n    // Phase 2: Create backup\n    if (!options.skipBackup) {\n      console.log('\\n💾 Phase 2: Creating backup...');\n      const backupResult = await rollbackSystem.createPreInitBackup();\n\n      if (!backupResult.success) {\n        printError('Backup creation failed:');\n        backupResult.errors.forEach((error) => console.error(`  ❌ ${error}`));\n        return;\n      }\n    }\n\n    // Phase 3: Initialize with atomic operations\n    console.log('\\n🔧 Phase 3: Atomic initialization...');\n    atomicOp = createAtomicOperation(rollbackSystem, 'enhanced-init');\n\n    const atomicBegin = await atomicOp.begin();\n    if (!atomicBegin) {\n      printError('Failed to begin atomic operation');\n      return;\n    }\n\n    // Perform initialization steps with checkpoints\n    await performInitializationWithCheckpoints(rollbackSystem, options, workingDir, dryRun);\n\n    // Phase 4: Post-initialization validation\n    console.log('\\n✅ Phase 4: Post-initialization validation...');\n    const postValidation = await validationSystem.validatePostInit();\n\n    if (!postValidation.success) {\n      printError('Post-initialization validation failed:');\n      postValidation.errors.forEach((error) => console.error(`  ❌ ${error}`));\n\n      // Attempt automatic rollback\n      console.log('\\n🔄 Attempting automatic rollback...');\n      await atomicOp.rollback();\n      printWarning('Initialization rolled back due to validation failure');\n      return;\n    }\n\n    // Phase 5: Configuration validation\n    console.log('\\n🔧 Phase 5: Configuration validation...');\n    const configValidation = await validationSystem.validateConfiguration();\n\n    if (configValidation.warnings.length > 0) {\n      printWarning('Configuration warnings:');\n      configValidation.warnings.forEach((warning) => console.warn(`  ⚠️  ${warning}`));\n    }\n\n    // Phase 6: Health checks\n    console.log('\\n🏥 Phase 6: System health checks...');\n    const healthChecks = await validationSystem.runHealthChecks();\n\n    if (healthChecks.warnings.length > 0) {\n      printWarning('Health check warnings:');\n      healthChecks.warnings.forEach((warning) => console.warn(`  ⚠️  ${warning}`));\n    }\n\n    // Commit atomic operation\n    await atomicOp.commit();\n\n    // Generate and display validation report\n    const fullValidation = await runFullValidation(workingDir, {\n      postInit: true,\n      skipPreInit: options.skipPreValidation,\n    });\n\n    console.log('\\n📊 Validation Report:');\n    console.log(fullValidation.report);\n\n    printSuccess('🎉 Enhanced initialization completed successfully!');\n    console.log('\\n✨ Your SPARC environment is fully validated and ready to use');\n  } catch (error) {\n    printError(`Enhanced initialization failed: ${error.message}`);\n\n    // Attempt rollback if atomic operation is active\n    if (atomicOp && !atomicOp.completed) {\n      console.log('\\n🔄 Performing emergency rollback...');\n      try {\n        await atomicOp.rollback();\n        printWarning('Emergency rollback completed');\n      } catch (rollbackError) {\n        printError(`Rollback also failed: ${rollbackError.message}`);\n      }\n    }\n  }\n}\n\n/**\n * Handle validation commands\n */\nasync function handleValidationCommand(subArgs, flags) {\n  const workingDir = process.env.PWD || process.cwd();\n\n  console.log('🔍 Running validation checks...');\n\n  const options = {\n    skipPreInit: subArgs.includes('--skip-pre-init'),\n    skipConfig: subArgs.includes('--skip-config'),\n    skipModeTest: subArgs.includes('--skip-mode-test'),\n    postInit: !subArgs.includes('--pre-init-only'),\n  };\n\n  try {\n    const validationResults = await runFullValidation(workingDir, options);\n\n    console.log('\\n📊 Validation Results:');\n    console.log(validationResults.report);\n\n    if (validationResults.success) {\n      printSuccess('✅ All validation checks passed');\n    } else {\n      printError('❌ Some validation checks failed');\n      process.exit(1);\n    }\n  } catch (error) {\n    printError(`Validation failed: ${error.message}`);\n    process.exit(1);\n  }\n}\n\n/**\n * Handle rollback commands\n */\nasync function handleRollbackCommand(subArgs, flags) {\n  const workingDir = process.env.PWD || process.cwd();\n  const rollbackSystem = new RollbackSystem(workingDir);\n\n  try {\n    // Check for specific rollback options\n    if (subArgs.includes('--full')) {\n      console.log('🔄 Performing full rollback...');\n      const result = await rollbackSystem.performFullRollback();\n\n      if (result.success) {\n        printSuccess('Full rollback completed successfully');\n      } else {\n        printError('Full rollback failed:');\n        result.errors.forEach((error) => console.error(`  ❌ ${error}`));\n      }\n    } else if (subArgs.includes('--partial')) {\n      const phaseIndex = subArgs.findIndex((arg) => arg === '--phase');\n      if (phaseIndex !== -1 && subArgs[phaseIndex + 1]) {\n        const phase = subArgs[phaseIndex + 1];\n        console.log(`🔄 Performing partial rollback for phase: ${phase}`);\n\n        const result = await rollbackSystem.performPartialRollback(phase);\n\n        if (result.success) {\n          printSuccess(`Partial rollback completed for phase: ${phase}`);\n        } else {\n          printError(`Partial rollback failed for phase: ${phase}`);\n          result.errors.forEach((error) => console.error(`  ❌ ${error}`));\n        }\n      } else {\n        printError('Partial rollback requires --phase <phase-name>');\n      }\n    } else {\n      // Interactive rollback point selection\n      const rollbackPoints = await rollbackSystem.listRollbackPoints();\n\n      if (rollbackPoints.rollbackPoints.length === 0) {\n        printWarning('No rollback points available');\n        return;\n      }\n\n      console.log('\\n📋 Available rollback points:');\n      rollbackPoints.rollbackPoints.forEach((point, index) => {\n        const date = new Date(point.timestamp).toLocaleString();\n        console.log(`  ${index + 1}. ${point.type} - ${date}`);\n      });\n\n      // For now, rollback to the most recent point\n      const latest = rollbackPoints.rollbackPoints[0];\n      if (latest) {\n        console.log(\n          `\\n🔄 Rolling back to: ${latest.type} (${new Date(latest.timestamp).toLocaleString()})`,\n        );\n        const result = await rollbackSystem.performFullRollback(latest.backupId);\n\n        if (result.success) {\n          printSuccess('Rollback completed successfully');\n        } else {\n          printError('Rollback failed');\n        }\n      }\n    }\n  } catch (error) {\n    printError(`Rollback operation failed: ${error.message}`);\n  }\n}\n\n/**\n * Handle list backups command\n */\nasync function handleListBackups(subArgs, flags) {\n  const workingDir = process.env.PWD || process.cwd();\n  const rollbackSystem = new RollbackSystem(workingDir);\n\n  try {\n    const rollbackPoints = await rollbackSystem.listRollbackPoints();\n\n    console.log('\\n📋 Rollback Points and Backups:');\n\n    if (rollbackPoints.rollbackPoints.length === 0) {\n      console.log('  No rollback points available');\n    } else {\n      console.log('\\n🔄 Rollback Points:');\n      rollbackPoints.rollbackPoints.forEach((point, index) => {\n        const date = new Date(point.timestamp).toLocaleString();\n        console.log(`  ${index + 1}. ${point.type} - ${date} (${point.backupId || 'No backup'})`);\n      });\n    }\n\n    if (rollbackPoints.checkpoints.length > 0) {\n      console.log('\\n📍 Checkpoints:');\n      rollbackPoints.checkpoints.slice(-5).forEach((checkpoint, index) => {\n        const date = new Date(checkpoint.timestamp).toLocaleString();\n        console.log(`  ${index + 1}. ${checkpoint.phase} - ${date} (${checkpoint.status})`);\n      });\n    }\n  } catch (error) {\n    printError(`Failed to list backups: ${error.message}`);\n  }\n}\n\n/**\n * Perform initialization with checkpoints\n */\nasync function performInitializationWithCheckpoints(\n  rollbackSystem,\n  options,\n  workingDir,\n  dryRun = false,\n) {\n  const phases = [\n    { name: 'file-creation', action: () => createInitialFiles(options, workingDir, dryRun) },\n    { name: 'directory-structure', action: () => createDirectoryStructure(workingDir, dryRun) },\n    { name: 'memory-setup', action: () => setupMemorySystem(workingDir, dryRun) },\n    { name: 'coordination-setup', action: () => setupCoordinationSystem(workingDir, dryRun) },\n    { name: 'executable-creation', action: () => createLocalExecutable(workingDir, dryRun) },\n  ];\n\n  if (options.sparc) {\n    phases.push(\n      { name: 'sparc-init', action: () => createSparcStructureManually() },\n      { name: 'claude-commands', action: () => createClaudeSlashCommands(workingDir) },\n    );\n  }\n\n  for (const phase of phases) {\n    console.log(`  🔧 ${phase.name}...`);\n\n    // Create checkpoint before phase\n    await rollbackSystem.createCheckpoint(phase.name, {\n      timestamp: Date.now(),\n      phase: phase.name,\n    });\n\n    try {\n      await phase.action();\n      console.log(`  ✅ ${phase.name} completed`);\n    } catch (error) {\n      console.error(`  ❌ ${phase.name} failed: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// Helper functions for atomic initialization\nasync function createInitialFiles(options, workingDir, dryRun = false) {\n  if (!dryRun) {\n    const claudeMd = options.sparc\n      ? createSparcClaudeMd()\n      : options.minimal\n        ? createMinimalClaudeMd()\n        : createFullClaudeMd();\n    await fs.writeFile(`${workingDir}/CLAUDE.md`, claudeMd, 'utf8');\n\n    const memoryBankMd = options.minimal ? createMinimalMemoryBankMd() : createFullMemoryBankMd();\n    await fs.writeFile(`${workingDir}/memory-bank.md`, memoryBankMd, 'utf8');\n\n    const coordinationMd = options.minimal\n      ? createMinimalCoordinationMd()\n      : createFullCoordinationMd();\n    await fs.writeFile(`${workingDir}/coordination.md`, coordinationMd, 'utf8');\n  }\n}\n\nasync function createDirectoryStructure(workingDir, dryRun = false) {\n  const directories = [\n    'memory',\n    'memory/agents',\n    'memory/sessions',\n    'coordination',\n    'coordination/memory_bank',\n    'coordination/subtasks',\n    'coordination/orchestration',\n    '.claude',\n    '.claude/commands',\n    '.claude/logs',\n  ];\n\n  if (!dryRun) {\n    for (const dir of directories) {\n      await fs.mkdir(`${workingDir}/${dir}`, { recursive: true });\n    }\n  }\n}\n\nasync function setupMemorySystem(workingDir, dryRun = false) {\n  if (!dryRun) {\n    const initialData = { agents: [], tasks: [], lastUpdated: Date.now() };\n    await fs.writeFile(\n      `${workingDir}/memory/claude-flow@alpha-data.json`, JSON.stringify(initialData, null, 2), 'utf8'\n    );\n\n    await fs.writeFile(`${workingDir}/memory/agents/README.md`, createAgentsReadme(), 'utf8');\n    await fs.writeFile(`${workingDir}/memory/sessions/README.md`, createSessionsReadme(), 'utf8');\n  }\n}\n\nasync function setupCoordinationSystem(workingDir, dryRun = false) {\n  // Coordination system is already set up by createDirectoryStructure\n  // This is a placeholder for future coordination setup logic\n}\n\n/**\n * Setup monitoring and telemetry for token tracking\n */\nasync function setupMonitoring(workingDir) {\n  console.log('  📈 Configuring token usage tracking...');\n  \n  const fs = await import('fs/promises');\n  const path = await import('path');\n  \n  try {\n    // Create .claude-flow@alpha directory for tracking data\n    const trackingDir = path.join(workingDir, '.claude-flow@alpha');\n    await fs.mkdir(trackingDir, { recursive: true });\n    \n    // Create initial token usage file\n    const tokenUsageFile = path.join(trackingDir, 'token-usage.json');\n    const initialData = {\n      total: 0,\n      input: 0,\n      output: 0,\n      byAgent: {},\n      lastUpdated: new Date().toISOString()\n    };\n    \n    await fs.writeFile(tokenUsageFile, JSON.stringify(initialData, null, 2));\n    printSuccess('  ✓ Created token usage tracking file');\n    \n    // Add telemetry configuration to .claude/settings.json if it exists\n    const settingsPath = path.join(workingDir, '.claude', 'settings.json');\n    try {\n      const settingsContent = await fs.readFile(settingsPath, 'utf8');\n      const settings = JSON.parse(settingsContent);\n      \n      // Add telemetry hook\n      if (!settings.hooks) settings.hooks = {};\n      if (!settings.hooks['post-task']) settings.hooks['post-task'] = [];\n      \n      // Add token tracking hook\n      const tokenTrackingHook = 'npx claude-flow@alpha internal track-tokens --session-id {{session_id}} --tokens {{token_usage}}';\n      if (!settings.hooks['post-task'].includes(tokenTrackingHook)) {\n        settings.hooks['post-task'].push(tokenTrackingHook);\n      }\n      \n      await fs.writeFile(settingsPath, JSON.stringify(settings, null, 2));\n      printSuccess('  ✓ Added token tracking hooks to settings');\n    } catch (err) {\n      console.log('  ⚠️  Could not update settings.json:', err.message);\n    }\n    \n    // Create monitoring configuration\n    const monitoringConfig = {\n      enabled: true,\n      telemetry: {\n        claudeCode: {\n          env: 'CLAUDE_CODE_ENABLE_TELEMETRY',\n          value: '1',\n          description: 'Enable Claude Code OpenTelemetry metrics'\n        }\n      },\n      tracking: {\n        tokens: true,\n        costs: true,\n        agents: true,\n        sessions: true\n      },\n      storage: {\n        location: '.claude-flow@alpha/token-usage.json',\n        format: 'json',\n        rotation: 'monthly'\n      }\n    };\n    \n    const configPath = path.join(trackingDir, 'monitoring.config.json');\n    await fs.writeFile(configPath, JSON.stringify(monitoringConfig, null, 2));\n    printSuccess('  ✓ Created monitoring configuration');\n    \n    // Create shell profile snippet for environment variable\n    const envSnippet = `\n# Claude Flow Token Tracking\n# Add this to your shell profile (.bashrc, .zshrc, etc.)\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\n\n# Optional: Set custom metrics path\n# export CLAUDE_METRICS_PATH=\"$HOME/.claude/metrics\"\n`;\n    \n    const envPath = path.join(trackingDir, 'env-setup.sh');\n    await fs.writeFile(envPath, envSnippet.trim());\n    printSuccess('  ✓ Created environment setup script');\n    \n    console.log('\\n  📋 To enable Claude Code telemetry:');\n    console.log('     1. Add to your shell profile: export CLAUDE_CODE_ENABLE_TELEMETRY=1');\n    console.log('     2. Or run: source .claude-flow@alpha/env-setup.sh');\n    console.log('\\n  💡 Token usage will be tracked in .claude-flow@alpha/token-usage.json');\n    console.log('     Run: claude-flow@alpha analysis token-usage --breakdown --cost-analysis');\n    \n  } catch (err) {\n    printError(`  Failed to setup monitoring: ${err.message}`);\n  }\n}\n\n/**\n * Enhanced Claude Flow v2.0.0 initialization\n */\nasync function enhancedClaudeFlowInit(flags, subArgs = []) {\n  console.log('🚀 Initializing Claude Flow v2.0.0 with enhanced features...');\n\n  const workingDir = process.cwd();\n  const force = flags.force || flags.f;\n  const dryRun = flags.dryRun || flags['dry-run'] || flags.d;\n  const initSparc = flags.roo || (subArgs && subArgs.includes('--roo')); // SPARC only with --roo flag\n\n  // Parse --agent flag for specialized agent setup\n  const agentType = flags.agent || (subArgs && subArgs.find(arg => arg.startsWith('--agent='))?.split('=')[1]);\n  const initReasoning = agentType === 'reasoning' || (subArgs && subArgs.includes('--agent') && subArgs.includes('reasoning'));\n\n  // Store parameters to avoid scope issues in async context\n  const args = subArgs || [];\n  const options = flags || {};\n\n  // Import fs, path, and os modules for Node.js\n  const fs = await import('fs/promises');\n  const { chmod } = fs;\n  const path = await import('path');\n  const os = await import('os');\n\n  try {\n    // Check existing files\n    const existingFiles = [];\n    const filesToCheck = [\n      'CLAUDE.md',\n      '.claude/settings.json',\n      '.mcp.json',\n      // Removed claude-flow@alpha.config.json per user request\n    ];\n\n    for (const file of filesToCheck) {\n      if (existsSync(`${workingDir}/${file}`)) {\n        existingFiles.push(file);\n      }\n    }\n\n    if (existingFiles.length > 0 && !force) {\n      printWarning(`The following files already exist: ${existingFiles.join(', ')}`);\n      console.log('Use --force to overwrite existing files');\n      return;\n    }\n\n    // Create CLAUDE.md\n    if (!dryRun) {\n      await fs.writeFile(`${workingDir}/CLAUDE.md`, createOptimizedSparcClaudeMd(), 'utf8');\n      printSuccess('✓ Created CLAUDE.md (Claude Flow v2.0.0 - Optimized)');\n    } else {\n      console.log('[DRY RUN] Would create CLAUDE.md (Claude Flow v2.0.0 - Optimized)');\n    }\n\n    // Create .claude directory structure\n    const claudeDir = `${workingDir}/.claude`;\n    if (!dryRun) {\n      await fs.mkdir(claudeDir, { recursive: true });\n      await fs.mkdir(`${claudeDir}/commands`, { recursive: true });\n      await fs.mkdir(`${claudeDir}/helpers`, { recursive: true });\n      printSuccess('✓ Created .claude directory structure');\n    } else {\n      console.log('[DRY RUN] Would create .claude directory structure');\n    }\n\n    // Create settings.json\n    if (!dryRun) {\n      await fs.writeFile(`${claudeDir}/settings.json`, createEnhancedSettingsJson(), 'utf8');\n      printSuccess('✓ Created .claude/settings.json with hooks and MCP configuration');\n    } else {\n      console.log('[DRY RUN] Would create .claude/settings.json');\n    }\n\n    // Copy statusline script\n    try {\n      let statuslineTemplate;\n      try {\n        // Try to read from templates directory first\n        statuslineTemplate = await fs.readFile(\n          path.join(__dirname, 'templates', 'statusline-command.sh'),\n          'utf8'\n        );\n      } catch {\n        // Fallback to embedded content (for binary builds)\n        statuslineTemplate = createStatuslineScript();\n      }\n\n      if (!dryRun) {\n        // Write to project .claude directory\n        await fs.writeFile(`${claudeDir}/statusline-command.sh`, statuslineTemplate, 'utf8');\n        await fs.chmod(`${claudeDir}/statusline-command.sh`, 0o755);\n\n        // Also write to home ~/.claude directory for global use\n        const homeClaudeDir = path.join(os.homedir(), '.claude');\n        await fs.mkdir(homeClaudeDir, { recursive: true });\n        await fs.writeFile(path.join(homeClaudeDir, 'statusline-command.sh'), statuslineTemplate, 'utf8');\n        await fs.chmod(path.join(homeClaudeDir, 'statusline-command.sh'), 0o755);\n\n        printSuccess('✓ Created statusline-command.sh in both .claude/ and ~/.claude/');\n      } else {\n        console.log('[DRY RUN] Would create .claude/statusline-command.sh and ~/.claude/statusline-command.sh');\n      }\n    } catch (err) {\n      // Not critical, just skip\n      if (!dryRun) {\n        console.log('  ⚠️  Could not create statusline script, skipping...');\n        console.log(`  ℹ️  Error: ${err.message}`);\n      }\n    }\n\n    // Create settings.local.json with default MCP permissions\n    const settingsLocal = {\n      permissions: {\n        allow: ['mcp__ruv-swarm', 'mcp__claude-flow@alpha', 'mcp__flow-nexus'],\n        deny: [],\n      },\n    };\n\n    if (!dryRun) {\n      await fs.writeFile(\n        `${claudeDir}/settings.local.json`, JSON.stringify(settingsLocal, null, 2, 'utf8'),\n      );\n      printSuccess('✓ Created .claude/settings.local.json with default MCP permissions');\n    } else {\n      console.log(\n        '[DRY RUN] Would create .claude/settings.local.json with default MCP permissions',\n      );\n    }\n\n    // Create .mcp.json at project root for MCP server configuration\n    const mcpConfig = {\n      mcpServers: {\n        'claude-flow@alpha': {\n          command: 'npx',\n          args: ['claude-flow@alpha', 'mcp', 'start'],\n          type: 'stdio',\n        },\n        'ruv-swarm': {\n          command: 'npx',\n          args: ['ruv-swarm@latest', 'mcp', 'start'],\n          type: 'stdio',\n        },\n        'flow-nexus': {\n          command: 'npx',\n          args: ['flow-nexus@latest', 'mcp', 'start'],\n          type: 'stdio',\n        },\n        'agentic-payments': {\n          command: 'npx',\n          args: ['agentic-payments@latest', 'mcp'],\n          type: 'stdio',\n        },\n      },\n    };\n\n    if (!dryRun) {\n      await fs.writeFile(`${workingDir}/.mcp.json`, JSON.stringify(mcpConfig, null, 2, 'utf8'));\n      printSuccess('✓ Created .mcp.json at project root for MCP server configuration');\n    } else {\n      console.log('[DRY RUN] Would create .mcp.json at project root for MCP server configuration');\n    }\n\n    // Removed claude-flow@alpha.config.json creation per user request\n\n    // Create command documentation\n    for (const [category, commands] of Object.entries(COMMAND_STRUCTURE)) {\n      const categoryDir = `${claudeDir}/commands/${category}`;\n\n      if (!dryRun) {\n        await fs.mkdir(categoryDir, { recursive: true });\n\n        // Create category README\n        const categoryReadme = `# ${category.charAt(0).toUpperCase() + category.slice(1)} Commands\n\nCommands for ${category} operations in Claude Flow.\n\n## Available Commands\n\n${commands.map((cmd) => `- [${cmd}](./${cmd}.md)`).join('\\n')}\n`;\n        await fs.writeFile(`${categoryDir}/README.md`, categoryReadme, 'utf8');\n\n        // Create individual command docs\n        for (const command of commands) {\n          const doc = createCommandDoc(category, command);\n          if (doc) {\n            await fs.writeFile(`${categoryDir}/${command}.md`, doc, 'utf8');\n          }\n        }\n\n        console.log(`  ✓ Created ${commands.length} ${category} command docs`);\n      } else {\n        console.log(`[DRY RUN] Would create ${commands.length} ${category} command docs`);\n      }\n    }\n\n    // Create wrapper scripts using the dedicated function\n    if (!dryRun) {\n      await createLocalExecutable(workingDir, dryRun);\n    } else {\n      console.log('[DRY RUN] Would create wrapper scripts');\n    }\n\n    // Create helper scripts\n    const helpers = ['setup-mcp.sh', 'quick-start.sh', 'github-setup.sh', 'github-safe.js', 'standard-checkpoint-hooks.sh', 'checkpoint-manager.sh'];\n    for (const helper of helpers) {\n      if (!dryRun) {\n        const content = createHelperScript(helper);\n        if (content) {\n          await fs.writeFile(`${claudeDir}/helpers/${helper}`, content, 'utf8');\n          await fs.chmod(`${claudeDir}/helpers/${helper}`, 0o755);\n        }\n      }\n    }\n\n    if (!dryRun) {\n      printSuccess(`✓ Created ${helpers.length} helper scripts`);\n    } else {\n      console.log(`[DRY RUN] Would create ${helpers.length} helper scripts`);\n    }\n\n    // Create standard directories from original init\n    const standardDirs = [\n      'memory',\n      'memory/agents',\n      'memory/sessions',\n      'coordination',\n      'coordination/memory_bank',\n      'coordination/subtasks',\n      'coordination/orchestration',\n      '.swarm', // Add .swarm directory for shared memory\n      '.hive-mind', // Add .hive-mind directory for hive-mind system\n      '.claude/checkpoints', // Add checkpoints directory for Git checkpoint system\n    ];\n\n    for (const dir of standardDirs) {\n      if (!dryRun) {\n        await fs.mkdir(`${workingDir}/${dir}`, { recursive: true });\n      }\n    }\n\n    if (!dryRun) {\n      printSuccess('✓ Created standard directory structure');\n\n      // Initialize memory system\n      const initialData = { agents: [], tasks: [], lastUpdated: Date.now() };\n      await fs.writeFile(\n        `${workingDir}/memory/claude-flow@alpha-data.json`, JSON.stringify(initialData, null, 2, 'utf8'),\n      );\n\n      // Create README files\n      await fs.writeFile(`${workingDir}/memory/agents/README.md`, createAgentsReadme(), 'utf8');\n      await fs.writeFile(`${workingDir}/memory/sessions/README.md`, createSessionsReadme(), 'utf8');\n\n      printSuccess('✓ Initialized memory system');\n\n      // Initialize memory database with fallback support\n      try {\n        // Check if database exists BEFORE creating it\n        const dbPath = '.swarm/memory.db';\n        const { existsSync } = await import('fs');\n        const dbExistedBefore = existsSync(dbPath);\n\n        // Handle ReasoningBank migration BEFORE FallbackMemoryStore initialization\n        // This prevents schema conflicts with old databases\n        if (dbExistedBefore) {\n          console.log('  🔍 Checking existing database for ReasoningBank schema...');\n\n          try {\n            const {\n              initializeReasoningBank,\n              checkReasoningBankTables,\n              migrateReasoningBank\n            } = await import('../../../reasoningbank/reasoningbank-adapter.js');\n\n            // Set the database path for ReasoningBank\n            process.env.CLAUDE_FLOW_DB_PATH = dbPath;\n\n            const tableCheck = await checkReasoningBankTables();\n\n            if (tableCheck.exists) {\n              console.log('  ✅ ReasoningBank schema already complete');\n            } else if (force) {\n              // User used --force flag, migrate the database\n              console.log(`  🔄 Migrating database: ${tableCheck.missingTables.length} tables missing`);\n              console.log(`     Missing: ${tableCheck.missingTables.join(', ')}`);\n\n              const migrationResult = await migrateReasoningBank();\n\n              if (migrationResult.success) {\n                printSuccess(`  ✓ Migration complete: added ${migrationResult.addedTables?.length || 0} tables`);\n                console.log('     Use --reasoningbank flag to enable AI-powered memory features');\n              } else {\n                console.log(`  ⚠️  Migration failed: ${migrationResult.message}`);\n                console.log('     Basic memory will work, use: memory init --reasoningbank to retry');\n              }\n            } else {\n              // Database exists with missing tables but no --force flag\n              console.log(`  ℹ️  Database has ${tableCheck.missingTables.length} missing ReasoningBank tables`);\n              console.log(`     Missing: ${tableCheck.missingTables.join(', ')}`);\n              console.log('     Use --force to migrate existing database');\n              console.log('     Or use: memory init --reasoningbank');\n            }\n          } catch (rbErr) {\n            console.log(`  ⚠️  ReasoningBank check failed: ${rbErr.message}`);\n            console.log('     Will attempt normal initialization...');\n          }\n        }\n\n        // Import and initialize FallbackMemoryStore to create the database\n        const { FallbackMemoryStore } = await import('../../../memory/fallback-store.js');\n        const memoryStore = new FallbackMemoryStore();\n        await memoryStore.initialize();\n\n        if (memoryStore.isUsingFallback()) {\n          printSuccess('✓ Initialized memory system (in-memory fallback for npx compatibility)');\n          console.log(\n            '  💡 For persistent storage, install locally: npm install claude-flow@alpha',\n          );\n        } else {\n          printSuccess('✓ Initialized memory database (.swarm/memory.db)');\n\n          // Initialize ReasoningBank schema for fresh databases\n          if (!dbExistedBefore) {\n            try {\n              const {\n                initializeReasoningBank\n              } = await import('../../../reasoningbank/reasoningbank-adapter.js');\n\n              // Set the database path for ReasoningBank\n              process.env.CLAUDE_FLOW_DB_PATH = dbPath;\n\n              console.log('  🧠 Initializing ReasoningBank schema...');\n              await initializeReasoningBank();\n              printSuccess('  ✓ ReasoningBank schema initialized (use --reasoningbank flag for AI-powered memory)');\n            } catch (rbErr) {\n              console.log(`  ⚠️  ReasoningBank initialization failed: ${rbErr.message}`);\n              console.log('     Basic memory will work, use: memory init --reasoningbank to retry');\n            }\n          }\n        }\n\n        memoryStore.close();\n      } catch (err) {\n        console.log(`  ⚠️  Could not initialize memory system: ${err.message}`);\n        console.log('     Memory will be initialized on first use');\n      }\n\n      // Initialize comprehensive hive-mind system\n      console.log('\\n🧠 Initializing Hive Mind System...');\n      try {\n        const hiveMindOptions = {\n          config: {\n            integration: {\n              claudeCode: { enabled: isClaudeCodeInstalled() },\n              mcpTools: { enabled: true }\n            },\n            monitoring: { enabled: flags.monitoring || false }\n          }\n        };\n        \n        const hiveMindResult = await initializeHiveMind(workingDir, hiveMindOptions, dryRun);\n        \n        if (hiveMindResult.success) {\n          printSuccess(`✓ Hive Mind System initialized with ${hiveMindResult.features.length} features`);\n          \n          // Log individual features\n          hiveMindResult.features.forEach(feature => {\n            console.log(`    • ${feature}`);\n          });\n        } else {\n          console.log(`  ⚠️  Hive Mind initialization failed: ${hiveMindResult.error}`);\n          if (hiveMindResult.rollbackRequired) {\n            console.log('  🔄 Automatic rollback may be required');\n          }\n        }\n      } catch (err) {\n        console.log(`  ⚠️  Could not initialize hive-mind system: ${err.message}`);\n      }\n    }\n\n    // Update .gitignore with Claude Flow entries\n    const gitignoreResult = await updateGitignore(workingDir, force, dryRun);\n    if (gitignoreResult.success) {\n      if (!dryRun) {\n        printSuccess(`✓ ${gitignoreResult.message}`);\n      } else {\n        console.log(gitignoreResult.message);\n      }\n    } else {\n      console.log(`  ⚠️  ${gitignoreResult.message}`);\n    }\n\n    // SPARC initialization (only with --roo flag)\n    let sparcInitialized = false;\n    if (initSparc) {\n      console.log('\\n🚀 Initializing SPARC development environment...');\n      try {\n        // Run create-sparc\n        console.log('  🔄 Running: npx -y create-sparc init --force');\n        execSync('npx -y create-sparc init --force', {\n          cwd: workingDir,\n          stdio: 'inherit',\n        });\n        sparcInitialized = true;\n        printSuccess('✅ SPARC environment initialized successfully');\n      } catch (err) {\n        console.log(`  ⚠️  Could not run create-sparc: ${err.message}`);\n        console.log('     SPARC features will be limited to basic functionality');\n      }\n    }\n\n    // Create Claude slash commands for SPARC\n    if (sparcInitialized && !dryRun) {\n      console.log('\\n📝 Creating Claude Code slash commands...');\n      await createClaudeSlashCommands(workingDir);\n    }\n\n    // Check for Claude Code and set up MCP servers (always enabled by default)\n    if (!dryRun && isClaudeCodeInstalled()) {\n      console.log('\\n🔍 Claude Code CLI detected!');\n      const skipMcp =\n        (options && options['skip-mcp']) ||\n        (subArgs && subArgs.includes && subArgs.includes('--skip-mcp'));\n\n      if (!skipMcp) {\n        await setupMcpServers(dryRun);\n      } else {\n        console.log('  ℹ️  Skipping MCP setup (--skip-mcp flag used)');\n        console.log('\\n  📋 To add MCP servers manually:');\n        console.log('     claude mcp add claude-flow npx claude-flow@alpha mcp start');\n        console.log('     claude mcp add ruv-swarm npx ruv-swarm@latest mcp start');\n        console.log('     claude mcp add flow-nexus npx flow-nexus@latest mcp start');\n        console.log('     claude mcp add agentic-payments npx agentic-payments@latest mcp');\n        console.log('\\n  💡 MCP servers are defined in .mcp.json (project scope)');\n      }\n    } else if (!dryRun && !isClaudeCodeInstalled()) {\n      console.log('\\n⚠️  Claude Code CLI not detected!');\n      console.log('\\n  📥 To install Claude Code:');\n      console.log('     npm install -g @anthropic-ai/claude-code');\n      console.log('\\n  📋 After installing, add MCP servers:');\n      console.log('     claude mcp add claude-flow@alpha npx claude-flow@alpha mcp start');\n      console.log('     claude mcp add ruv-swarm npx ruv-swarm@latest mcp start');\n      console.log('     claude mcp add flow-nexus npx flow-nexus@latest mcp start');\n      console.log('     claude mcp add agentic-payments npx agentic-payments@latest mcp');\n      console.log('\\n  💡 MCP servers are defined in .mcp.json (project scope)');\n    }\n\n    // Create agent directories and copy all agent files\n    console.log('\\n🤖 Setting up agent system...');\n    if (!dryRun) {\n      await createAgentDirectories(workingDir, dryRun);\n      const agentResult = await copyAgentFiles(workingDir, {\n        force: force,\n        dryRun: dryRun\n      });\n\n      if (agentResult.success) {\n        await validateAgentSystem(workingDir);\n\n        // Copy command files including Flow Nexus commands\n        console.log('\\n📚 Setting up command system...');\n        const commandResult = await copyCommandFiles(workingDir, {\n          force: force,\n          dryRun: dryRun\n        });\n\n        if (commandResult.success) {\n          console.log('✅ ✓ Command system setup complete with Flow Nexus integration');\n        } else {\n          console.log('⚠️  Command system setup failed:', commandResult.error);\n        }\n\n        // Copy skill files including skill-builder\n        console.log('\\n🎯 Setting up skill system...');\n        const skillResult = await copySkillFiles(workingDir, {\n          force: force,\n          dryRun: dryRun\n        });\n\n        if (skillResult.success) {\n          await validateSkillSystem(workingDir);\n          console.log('✅ ✓ Skill system setup complete with skill-builder');\n        } else {\n          console.log('⚠️  Skill system setup failed:', skillResult.error);\n        }\n\n        console.log('✅ ✓ Agent system setup complete with 64 specialized agents');\n      } else {\n        console.log('⚠️  Agent system setup failed:', agentResult.error);\n      }\n\n      // Setup reasoning agents if --agent reasoning flag is used\n      if (initReasoning) {\n        console.log('\\n🧠 Setting up reasoning agents with ReasoningBank integration...');\n        try {\n          const reasoningAgentsDir = `${workingDir}/.claude/agents/reasoning`;\n          await fs.mkdir(reasoningAgentsDir, { recursive: true });\n\n          // Import path module\n          const path = await import('path');\n          const { fileURLToPath } = await import('url');\n          const { dirname, join } = path.default;\n\n          // Get the source reasoning agents directory\n          const __filename = fileURLToPath(import.meta.url);\n          const __dirname = dirname(__filename);\n          const sourceReasoningDir = join(__dirname, '../../../../.claude/agents/reasoning');\n\n          // Copy reasoning agent files\n          try {\n            const reasoningFiles = await fs.readdir(sourceReasoningDir);\n            let copiedReasoningAgents = 0;\n\n            for (const file of reasoningFiles) {\n              if (file.endsWith('.md')) {\n                const sourcePath = join(sourceReasoningDir, file);\n                const destPath = join(reasoningAgentsDir, file);\n                const content = await fs.readFile(sourcePath, 'utf8');\n                await fs.writeFile(destPath, content);\n                copiedReasoningAgents++;\n              }\n            }\n\n            printSuccess(`✓ Copied ${copiedReasoningAgents} reasoning agent files`);\n            console.log('  📚 Reasoning agents available:');\n            console.log('    • goal-planner - Goal-Oriented Action Planning specialist');\n            console.log('    • sublinear-goal-planner - Sub-linear complexity goal planning');\n            console.log('  💡 Use: npx agentic-flow --agent goal-planner --task \"your task\"');\n            console.log('  📖 Documentation: .claude/agents/reasoning/README.md');\n          } catch (err) {\n            console.log(`  ⚠️  Could not copy reasoning agents: ${err.message}`);\n            console.log('     Reasoning agents may not be available yet');\n          }\n        } catch (err) {\n          console.log(`  ⚠️  Reasoning agent setup failed: ${err.message}`);\n        }\n      }\n    } else {\n      console.log('  [DRY RUN] Would create agent system with 64 specialized agents');\n      if (initReasoning) {\n        console.log('  [DRY RUN] Would also setup reasoning agents with ReasoningBank integration');\n      }\n    }\n\n    // Optional: Setup monitoring and telemetry\n    const enableMonitoring = flags.monitoring || flags['enable-monitoring'];\n    if (enableMonitoring && !dryRun) {\n      console.log('\\n📊 Setting up monitoring and telemetry...');\n      await setupMonitoring(workingDir);\n    }\n    \n    // Final instructions with hive-mind status\n    console.log('\\n🎉 Claude Flow v2.0.0 initialization complete!');\n    \n    // Display hive-mind status\n    const hiveMindStatus = getHiveMindStatus(workingDir);\n    console.log('\\n🧠 Hive Mind System Status:');\n    console.log(`  Configuration: ${hiveMindStatus.configured ? '✅ Ready' : '❌ Missing'}`);\n    console.log(`  Database: ${hiveMindStatus.database === 'sqlite' ? '✅ SQLite' : hiveMindStatus.database === 'fallback' ? '⚠️ JSON Fallback' : '❌ Not initialized'}`);\n    console.log(`  Directory Structure: ${hiveMindStatus.directories ? '✅ Created' : '❌ Missing'}`);\n    \n    console.log('\\n📚 Quick Start:');\n    if (isClaudeCodeInstalled()) {\n      console.log('1. View available commands: ls .claude/commands/');\n      console.log('2. Start a swarm: npx claude-flow@alpha swarm \"your objective\" --claude');\n      console.log('3. Use hive-mind: npx claude-flow@alpha hive-mind spawn \"command\" --claude');\n      console.log('4. Use MCP tools in Claude Code for enhanced coordination');\n      if (hiveMindStatus.configured) {\n        console.log('5. Initialize first swarm: npx claude-flow@alpha hive-mind init');\n      }\n    } else {\n      console.log('1. Install Claude Code: npm install -g @anthropic-ai/claude-code');\n      console.log('2. Add MCP servers (see instructions above)');\n      console.log('3. View available commands: ls .claude/commands/');\n      console.log('4. Start a swarm: npx claude-flow@alpha swarm \"your objective\" --claude');\n      console.log('5. Use hive-mind: npx claude-flow@alpha hive-mind spawn \"command\" --claude');\n      if (hiveMindStatus.configured) {\n        console.log('6. Initialize first swarm: npx claude-flow@alpha hive-mind init');\n      }\n    }\n    console.log('\\n💡 Tips:');\n    console.log('• Check .claude/commands/ for detailed documentation');\n    console.log('• Use --help with any command for options');\n    console.log('• Run commands with --claude flag for best Claude Code integration');\n    console.log('• Enable GitHub integration with .claude/helpers/github-setup.sh');\n    console.log('• Git checkpoints are automatically enabled in settings.json');\n    console.log('• Use .claude/helpers/checkpoint-manager.sh for easy rollback');\n  } catch (err) {\n    printError(`Failed to initialize Claude Flow v2.0.0: ${err.message}`);\n    \n    // Attempt hive-mind rollback if it was partially initialized\n    try {\n      const hiveMindStatus = getHiveMindStatus(workingDir);\n      if (hiveMindStatus.directories || hiveMindStatus.configured) {\n        console.log('\\n🔄 Attempting hive-mind system rollback...');\n        const rollbackResult = await rollbackHiveMindInit(workingDir);\n        if (rollbackResult.success) {\n          console.log('  ✅ Hive-mind rollback completed');\n        } else {\n          console.log(`  ⚠️  Hive-mind rollback failed: ${rollbackResult.error}`);\n        }\n      }\n    } catch (rollbackErr) {\n      console.log(`  ⚠️  Rollback error: ${rollbackErr.message}`);\n    }\n  }\n}\n\n/**\n * Flow Nexus minimal initialization - only creates Flow Nexus CLAUDE.md, commands, and agents\n */\nasync function flowNexusMinimalInit(flags, subArgs) {\n  console.log('🌐 Flow Nexus: Initializing minimal setup...');\n  \n  try {\n    const force = flags.force || flags.f;\n    \n    // Import functions we need\n    const { createFlowNexusClaudeMd } = await import('./templates/claude-md.js');\n    const { promises: fs } = await import('fs');\n    \n    // Create Flow Nexus CLAUDE.md\n    console.log('📝 Creating Flow Nexus CLAUDE.md...');\n    const flowNexusClaudeMd = createFlowNexusClaudeMd();\n    await fs.writeFile('CLAUDE.md', flowNexusClaudeMd);\n    console.log('  ✅ Created CLAUDE.md with Flow Nexus integration');\n    \n    // Create .claude/commands/flow-nexus directory and copy commands\n    console.log('📁 Setting up Flow Nexus commands...');\n    await fs.mkdir('.claude/commands/flow-nexus', { recursive: true });\n    \n    // Copy Flow Nexus command files\n    const { fileURLToPath } = await import('url');\n    const { dirname, join } = await import('path');\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = dirname(__filename);\n    const sourceCommandsDir = join(__dirname, '../../../../.claude/commands/flow-nexus');\n    try {\n      const commandFiles = await fs.readdir(sourceCommandsDir);\n      let copiedCommands = 0;\n      \n      for (const file of commandFiles) {\n        if (file.endsWith('.md')) {\n          const sourcePath = `${sourceCommandsDir}/${file}`;\n          const destPath = `.claude/commands/flow-nexus/${file}`;\n          const content = await fs.readFile(sourcePath, 'utf8');\n          await fs.writeFile(destPath, content);\n          copiedCommands++;\n        }\n      }\n      \n      console.log(`  ✅ Copied ${copiedCommands} Flow Nexus command files`);\n    } catch (err) {\n      console.log('  ⚠️  Could not copy Flow Nexus commands:', err.message);\n    }\n    \n    // Create .claude/agents/flow-nexus directory and copy agents\n    console.log('🤖 Setting up Flow Nexus agents...');\n    await fs.mkdir('.claude/agents/flow-nexus', { recursive: true });\n    \n    // Copy Flow Nexus agent files\n    const sourceAgentsDir = join(__dirname, '../../../../.claude/agents/flow-nexus');\n    try {\n      const agentFiles = await fs.readdir(sourceAgentsDir);\n      let copiedAgents = 0;\n      \n      for (const file of agentFiles) {\n        if (file.endsWith('.md')) {\n          const sourcePath = `${sourceAgentsDir}/${file}`;\n          const destPath = `.claude/agents/flow-nexus/${file}`;\n          const content = await fs.readFile(sourcePath, 'utf8');\n          await fs.writeFile(destPath, content);\n          copiedAgents++;\n        }\n      }\n      \n      console.log(`  ✅ Copied ${copiedAgents} Flow Nexus agent files`);\n    } catch (err) {\n      console.log('  ⚠️  Could not copy Flow Nexus agents:', err.message);\n    }\n    \n    console.log('\\n🎉 Flow Nexus minimal initialization complete!');\n    console.log('📚 Created: CLAUDE.md with Flow Nexus documentation');\n    console.log('📁 Created: .claude/commands/flow-nexus/ directory with command documentation');\n    console.log('🤖 Created: .claude/agents/flow-nexus/ directory with specialized agents');\n    console.log('');\n    console.log('💡 Quick Start:');\n    console.log('  1. Register: mcp__flow-nexus__user_register({ email, password })');\n    console.log('  2. Login: mcp__flow-nexus__user_login({ email, password })');\n    console.log('  3. Deploy: mcp__flow-nexus__swarm_init({ topology: \"mesh\", maxAgents: 5 })');\n    console.log('');\n    console.log('🔗 Use Flow Nexus MCP tools in Claude Code for full functionality');\n    \n  } catch (err) {\n    console.log(`❌ Flow Nexus initialization failed: ${err.message}`);\n    console.log('Stack trace:', err.stack);\n    process.exit(1);\n  }\n}\n"],"names":["printSuccess","printError","printWarning","existsSync","process","spawn","execSync","runCommand","command","args","options","Promise","resolve","reject","child","cwd","env","stdio","stdout","stderr","on","data","code","success","Error","createLocalExecutable","createSparcStructureManually","createClaudeSlashCommands","createOptimizedClaudeSlashCommands","promises","fs","copyTemplates","copyRevisedTemplates","validateTemplatesExist","copyAgentFiles","createAgentDirectories","validateAgentSystem","copyCommandFiles","copySkillFiles","validateSkillSystem","showInitHelp","batchInitCommand","batchInitFromConfig","validateBatchOptions","ValidationSystem","runFullValidation","RollbackSystem","createAtomicOperation","createEnhancedSettingsJson","createCommandDoc","createHelperScript","COMMAND_STRUCTURE","createOptimizedSparcClaudeMd","getIsolatedNpxEnv","updateGitignore","createFullClaudeMd","createSparcClaudeMd","createMinimalClaudeMd","createFullMemoryBankMd","createMinimalMemoryBankMd","createFullCoordinationMd","createMinimalCoordinationMd","createAgentsReadme","createSessionsReadme","initializeHiveMind","getHiveMindStatus","rollbackHiveMindInit","isClaudeCodeInstalled","setupMcpServers","dryRun","console","log","servers","name","description","server","err","message","createStatuslineScript","initCommand","subArgs","flags","help","h","includes","generateEnvTemplate","workingDir","PWD","force","f","result","created","exists","hasVerificationFlags","verify","pair","flowNexusMinimalInit","basic","minimal","sparc","enhancedClaudeFlowInit","handleValidationCommand","handleRollbackCommand","handleListBackups","batchInitFlag","configFlag","config","handleBatchInit","useEnhanced","enhancedInitCommand","initForce","initMinimal","initSparc","roo","initDryRun","initOptimized","selectedModes","modes","split","initVerify","initPair","chdir","files","existingFiles","file","stat","push","length","join","templateOptions","optimized","createVerificationClaudeMd","createVerificationSettingsJson","writeFile","mkdir","recursive","validation","valid","revisedResults","verbose","copyResults","skipClaudeMd","skipSettings","copiedFiles","skippedFiles","errors","forEach","sparcInitialized","createSparcResult","modeCount","gitignoreResult","hiveMindOptions","integration","claudeCode","enabled","mcpTools","monitoring","hiveMindResult","error","skipMcp","parallel","s","m","maxConcurrency","progressTracking","template","environments","map","trim","validationErrors","configFile","results","projectsString","projects","project","successful","filter","r","failed","rollbackSystem","validationSystem","atomicOp","initOptions","skipPreValidation","skipBackup","validateOnly","preValidation","validatePreInit","warnings","warning","warn","backupResult","createPreInitBackup","atomicBegin","begin","performInitializationWithCheckpoints","postValidation","validatePostInit","rollback","configValidation","validateConfiguration","healthChecks","runHealthChecks","commit","fullValidation","postInit","skipPreInit","report","completed","rollbackError","skipConfig","skipModeTest","validationResults","exit","performFullRollback","phaseIndex","findIndex","arg","phase","performPartialRollback","rollbackPoints","listRollbackPoints","point","index","date","Date","timestamp","toLocaleString","type","latest","backupId","checkpoints","slice","checkpoint","status","phases","action","createInitialFiles","createDirectoryStructure","setupMemorySystem","setupCoordinationSystem","createCheckpoint","now","claudeMd","memoryBankMd","coordinationMd","directories","dir","initialData","agents","tasks","lastUpdated","JSON","stringify","setupMonitoring","path","trackingDir","tokenUsageFile","total","input","output","byAgent","toISOString","settingsPath","settingsContent","readFile","settings","parse","hooks","tokenTrackingHook","monitoringConfig","telemetry","value","tracking","tokens","costs","sessions","storage","location","format","rotation","configPath","envSnippet","envPath","d","agentType","agent","find","startsWith","initReasoning","chmod","os","filesToCheck","claudeDir","statuslineTemplate","__dirname","homeClaudeDir","homedir","settingsLocal","permissions","allow","deny","mcpConfig","mcpServers","category","commands","Object","entries","categoryDir","categoryReadme","charAt","toUpperCase","cmd","doc","helpers","helper","content","standardDirs","dbPath","dbExistedBefore","initializeReasoningBank","checkReasoningBankTables","migrateReasoningBank","CLAUDE_FLOW_DB_PATH","tableCheck","missingTables","migrationResult","addedTables","rbErr","FallbackMemoryStore","memoryStore","initialize","isUsingFallback","close","features","feature","rollbackRequired","agentResult","commandResult","skillResult","reasoningAgentsDir","fileURLToPath","dirname","default","__filename","url","sourceReasoningDir","reasoningFiles","readdir","copiedReasoningAgents","endsWith","sourcePath","destPath","enableMonitoring","hiveMindStatus","configured","database","rollbackResult","rollbackErr","createFlowNexusClaudeMd","flowNexusClaudeMd","sourceCommandsDir","commandFiles","copiedCommands","sourceAgentsDir","agentFiles","copiedAgents","stack"],"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,EAAEC,YAAY,QAAc,iBAAiB;AAC9E,SAASC,UAAU,QAAQ,KAAK;AAChC,OAAOC,aAAa,UAAU;AAE9B,SAASC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAIhD,SAASC,WAAWC,OAAO,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC;IAC7C,OAAO,IAAIC,QAAQ,CAACC,SAASC;QAC3B,MAAMC,QAAQT,MAAMG,SAASC,MAAM;YACjCM,KAAKL,QAAQK,GAAG;YAChBC,KAAK;gBAAE,GAAGZ,QAAQY,GAAG;gBAAE,GAAGN,QAAQM,GAAG;YAAC;YACtCC,OAAOP,QAAQQ,MAAM,KAAK,YAAY,YAAY;QACpD;QAEA,IAAIA,SAAS;QACb,IAAIC,SAAS;QAEb,IAAIT,QAAQQ,MAAM,KAAK,WAAW;YAChCJ,MAAMI,MAAM,CAACE,EAAE,CAAC,QAAQ,CAACC;gBAAWH,UAAUG;YAAM;YACpDP,MAAMK,MAAM,CAACC,EAAE,CAAC,QAAQ,CAACC;gBAAWF,UAAUE;YAAM;QACtD;QAEAP,MAAMM,EAAE,CAAC,SAAS,CAACE;YACjB,IAAIA,SAAS,GAAG;gBACdV,QAAQ;oBAAEW,SAAS;oBAAMD;oBAAMJ;oBAAQC;gBAAO;YAChD,OAAO;gBACLN,OAAO,IAAIW,MAAM,CAAC,8BAA8B,EAAEF,MAAM;YAC1D;QACF;QAEAR,MAAMM,EAAE,CAAC,SAASP;IACpB;AACF;AACA,SAASY,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,4BAA4B,QAAQ,uBAAuB;AACpE,SAASC,yBAAyB,QAAQ,sCAAsC;AAChF,SAASC,kCAAkC,QAAQ,gDAAgD;AAEnG,SAASC,YAAYC,EAAE,QAAQ,KAAK;AACpC,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,oBAAoB,EAAEC,sBAAsB,QAAQ,8BAA8B;AAC3F,SAASC,cAAc,EAAEC,sBAAsB,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,oBAAoB;AAClH,SAASC,cAAc,EAA0BC,mBAAmB,QAAQ,qBAAqB;AACjG,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,oBAAoB,QAAQ,kBAAkB;AAC9F,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,wBAAwB;AAC5E,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,sBAAsB;AAC5E,SAEEC,0BAA0B,EAE1BC,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,QACZ,oCAAoC;AAC3C,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,iBAAiB,QAAQ,uCAAuC;AACzE,SAASC,eAAe,QAA8B,yBAAyB;AAC/E,SACEC,kBAAkB,EAClBC,mBAAmB,EACnBC,qBAAqB,QAChB,2BAA2B;AAKlC,SACEC,sBAAsB,EACtBC,yBAAyB,QACpB,gCAAgC;AACvC,SACEC,wBAAwB,EACxBC,2BAA2B,QACtB,iCAAiC;AACxC,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,8BAA8B;AACvF,SACEC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAoB,QACf,sBAAsB;AAK7B,SAASC;IACP,IAAI;QACF7D,SAAS,gBAAgB;YAAEW,OAAO;QAAS;QAC3C,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAKA,eAAemD,gBAAgBC,UAAS,KAAK;IAC3CC,QAAQC,GAAG,CAAC;IAEZ,MAAMC,UAAU;QACd;YACEC,MAAM;YACNjE,SAAS;YACTkE,aAAa;QACf;QACA;YACED,MAAM;YACNjE,SAAS;YACTkE,aAAa;QACf;QACA;YACED,MAAM;YACNjE,SAAS;YACTkE,aAAa;QACf;QACA;YACED,MAAM;YACNjE,SAAS;YACTkE,aAAa;QACf;KACD;IAED,KAAK,MAAMC,UAAUH,QAAS;QAC5B,IAAI;YACF,IAAI,CAACH,SAAQ;gBACXC,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEI,OAAOF,IAAI,CAAC,GAAG,CAAC;gBAC3CnE,SAAS,CAAC,eAAe,EAAEqE,OAAOF,IAAI,CAAC,CAAC,EAAEE,OAAOnE,OAAO,EAAE,EAAE;oBAAES,OAAO;gBAAU;gBAC/EqD,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEI,OAAOF,IAAI,CAAC,GAAG,EAAEE,OAAOD,WAAW,EAAE;YAChE,OAAO;gBACLJ,QAAQC,GAAG,CAAC,CAAC,sBAAsB,EAAEI,OAAOF,IAAI,CAAC,GAAG,EAAEE,OAAOD,WAAW,EAAE;YAC5E;QACF,EAAE,OAAOE,KAAK;YACZN,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEI,OAAOF,IAAI,CAAC,EAAE,EAAEG,IAAIC,OAAO,EAAE;YAChEP,QAAQC,GAAG,CACT,CAAC,kDAAkD,EAAEI,OAAOF,IAAI,CAAC,CAAC,EAAEE,OAAOnE,OAAO,EAAE;QAExF;IACF;IAEA,IAAI,CAAC6D,SAAQ;QACXC,QAAQC,GAAG,CAAC;QACZ,IAAI;YACFjE,SAAS,mBAAmB;gBAAEW,OAAO;YAAU;QACjD,EAAE,OAAO2D,KAAK;YACZN,QAAQC,GAAG,CAAC;QACd;IACF;AACF;AAKA,SAASO;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLV,CAAC;AACD;AAEA,OAAO,eAAeC,YAAYC,OAAO,EAAEC,KAAK;IAE9C,IAAIA,MAAMC,IAAI,IAAID,MAAME,CAAC,IAAIH,QAAQI,QAAQ,CAAC,aAAaJ,QAAQI,QAAQ,CAAC,OAAO;QACjF5C;QACA;IACF;IAGA,IAAIyC,MAAMjE,GAAG,IAAIgE,QAAQI,QAAQ,CAAC,UAAU;QAC1C,MAAM,EAAEC,mBAAmB,EAAE,GAAG,MAAM,MAAM,CAAC;QAC7C,MAAMC,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAInF,QAAQW,GAAG;QACjD,MAAMyE,QAAQP,MAAMO,KAAK,IAAIP,MAAMQ,CAAC;QAEpCnB,QAAQC,GAAG,CAAC;QACZ,MAAMmB,SAAS,MAAML,oBAAoBC,YAAYE;QAErD,IAAIE,OAAOC,OAAO,EAAE;YAClBrB,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;QACd,OAAO,IAAImB,OAAOE,MAAM,EAAE;YACxBtB,QAAQC,GAAG,CAAC;QACd;QAEA;IACF;IAGA,MAAMsB,uBAAuBb,QAAQI,QAAQ,CAAC,eAAeJ,QAAQI,QAAQ,CAAC,aACjDH,MAAMa,MAAM,IAAIb,MAAMc,IAAI;IAGvD,IAAId,KAAK,CAAC,aAAa,EAAE;QACvB,OAAO,MAAMe,qBAAqBf,OAAOD;IAC3C;IAIA,IAAI,CAACC,MAAMgB,KAAK,IAAI,CAAChB,MAAMiB,OAAO,IAAI,CAACjB,MAAMkB,KAAK,IAAI,CAACN,sBAAsB;QAC3E,OAAO,MAAMO,uBAAuBnB,OAAOD;IAC7C;IAGA,IAAIA,QAAQI,QAAQ,CAAC,iBAAiBJ,QAAQI,QAAQ,CAAC,oBAAoB;QACzE,OAAOiB,wBAAwBrB,SAASC;IAC1C;IAEA,IAAID,QAAQI,QAAQ,CAAC,eAAe;QAClC,OAAOkB,sBAAsBtB,SAASC;IACxC;IAEA,IAAID,QAAQI,QAAQ,CAAC,mBAAmB;QACtC,OAAOmB,kBAAkBvB,SAASC;IACpC;IAGA,MAAMuB,gBAAgBvB,KAAK,CAAC,aAAa,IAAID,QAAQI,QAAQ,CAAC;IAC9D,MAAMqB,aAAaxB,MAAMyB,MAAM,IAAI1B,QAAQI,QAAQ,CAAC;IAEpD,IAAIoB,iBAAiBC,YAAY;QAC/B,OAAOE,gBAAgB3B,SAASC;IAClC;IAGA,MAAM2B,cAAc5B,QAAQI,QAAQ,CAAC,iBAAiBJ,QAAQI,QAAQ,CAAC;IAEvE,IAAIwB,aAAa;QACf,OAAOC,oBAAoB7B,SAASC;IACtC;IAGA,MAAM6B,YAAY9B,QAAQI,QAAQ,CAAC,cAAcJ,QAAQI,QAAQ,CAAC,SAASH,MAAMO,KAAK;IACtF,MAAMuB,cAAc/B,QAAQI,QAAQ,CAAC,gBAAgBJ,QAAQI,QAAQ,CAAC,SAASH,MAAMiB,OAAO;IAC5F,MAAMc,YAAY/B,MAAMgC,GAAG,IAAKjC,WAAWA,QAAQI,QAAQ,CAAC;IAC5D,MAAM8B,aAAalC,QAAQI,QAAQ,CAAC,gBAAgBJ,QAAQI,QAAQ,CAAC,SAASH,MAAMZ,MAAM;IAC1F,MAAM8C,gBAAgBH,aAAaF;IACnC,MAAMM,gBAAgBnC,MAAMoC,KAAK,GAAGpC,MAAMoC,KAAK,CAACC,KAAK,CAAC,OAAO;IAG7D,MAAMC,aAAavC,QAAQI,QAAQ,CAAC,eAAeH,MAAMa,MAAM;IAC/D,MAAM0B,WAAWxC,QAAQI,QAAQ,CAAC,aAAaH,MAAMc,IAAI;IAIzD,MAAMT,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAIxE;IACtCuD,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEe,YAAY;IAG/C,IAAI;QACFlF,QAAQqH,KAAK,CAACnC;IAChB,EAAE,OAAOV,KAAK;QACZ1E,aAAa,CAAC,8BAA8B,EAAEoF,WAAW,EAAE,EAAEV,IAAIC,OAAO,EAAE;IAC5E;IAEA,IAAI;QACF7E,aAAa;QAGb,MAAM0H,QAAQ;YAAC;YAAa;YAAkB;SAAkB;QAChE,MAAMC,gBAAgB,EAAE;QAExB,KAAK,MAAMC,QAAQF,MAAO;YACxB,IAAI;gBACF,MAAM5F,GAAG+F,IAAI,CAAC,GAAGvC,WAAW,CAAC,EAAEsC,MAAM;gBACrCD,cAAcG,IAAI,CAACF;YACrB,EAAE,OAAM,CAER;QACF;QAEA,IAAID,cAAcI,MAAM,GAAG,KAAK,CAACjB,WAAW;YAC1C5G,aAAa,CAAC,mCAAmC,EAAEyH,cAAcK,IAAI,CAAC,OAAO;YAC7E1D,QAAQC,GAAG,CAAC;YACZ;QACF;QAGA,MAAM0D,kBAAkB;YACtB9B,OAAOa;YACPd,SAASa;YACTmB,WAAWf;YACX9C,QAAQ6C;YACR1B,OAAOsB;YACPM,eAAeA;YACftB,QAAQyB;YACRxB,MAAMyB;QACR;QAGA,IAAID,cAAcC,UAAU;YAC1BlD,QAAQC,GAAG,CAAC;YAGZ,IAAI,CAAC2C,YAAY;gBACf,MAAM,EAAEiB,0BAA0B,EAAEC,8BAA8B,EAAE,GAAG,MAAM,MAAM,CAAC;gBACpF,MAAMtG,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,UAAU,CAAC,EAAE6C,8BAA8B;gBAG5E,MAAMrG,GAAGwG,KAAK,CAAC,GAAGhD,WAAW,QAAQ,CAAC,EAAE;oBAAEiD,WAAW;gBAAK;gBAC1D,MAAMzG,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,sBAAsB,CAAC,EAAE8C,kCAAkC;gBAC5F9D,QAAQC,GAAG,CAAC;YACd,OAAO;gBACLD,QAAQC,GAAG,CAAC;YACd;YAGA,MAAMiE,aAAavG;YACnB,IAAIuG,WAAWC,KAAK,EAAE;gBACpB,MAAMC,iBAAiB,MAAM1G,qBAAqBsD,YAAY;oBAC5DE,OAAOsB;oBACPzC,QAAQ6C;oBACRyB,SAAS;oBACTxC,OAAOa;gBACT;YACF;YAGA,MAAM4B,cAAc,MAAM7G,cAAcuD,YAAY;gBAClD,GAAG2C,eAAe;gBAClBY,cAAc;gBACdC,cAAc;YAChB;QAEF,OAAO;YAEL,MAAMN,aAAavG;YACnB,IAAIuG,WAAWC,KAAK,EAAE;gBACpBnE,QAAQC,GAAG,CAAC;gBACZ,MAAMmE,iBAAiB,MAAM1G,qBAAqBsD,YAAY;oBAC5DE,OAAOsB;oBACPzC,QAAQ6C;oBACRyB,SAAS;oBACTxC,OAAOa;gBACT;gBAEA,IAAI0B,eAAenH,OAAO,EAAE;oBAC1B+C,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEmE,eAAeK,WAAW,CAAChB,MAAM,CAAC,eAAe,CAAC;oBAC5E,IAAIW,eAAeM,YAAY,CAACjB,MAAM,GAAG,GAAG;wBAC1CzD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEmE,eAAeM,YAAY,CAACjB,MAAM,CAAC,eAAe,CAAC;oBAClF;gBACF,OAAO;oBACLzD,QAAQC,GAAG,CAAC;oBACZmE,eAAeO,MAAM,CAACC,OAAO,CAACtE,CAAAA,MAAON,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEK,KAAK;gBACjE;YACF,OAAO;gBAELN,QAAQC,GAAG,CAAC;gBACZ,MAAMqE,cAAc,MAAM7G,cAAcuD,YAAY2C;gBAEpD,IAAI,CAACW,YAAYrH,OAAO,EAAE;oBACxBtB,WAAW;oBACX2I,YAAYK,MAAM,CAACC,OAAO,CAACtE,CAAAA,MAAON,QAAQC,GAAG,CAAC,CAAC,IAAI,EAAEK,KAAK;oBAC1D;gBACF;YACF;QACF;QAWA,IAAI,CAACsC,YAAY;YACf,MAAMzF,sBAAsB6D;QAC9B,OAAO;YACLhB,QAAQC,GAAG,CAAC;QACd;QAGA,IAAIyC,WAAW;YACb1C,QAAQC,GAAG,CAAC;YAEZ,IAAI2C,YAAY;gBACd5C,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CACT,mDACG4C,CAAAA,gBAAgB,4BAA4B,EAAC;gBAElD,IAAIC,eAAe;oBACjB9C,QAAQC,GAAG,CACT,CAAC,sDAAsD,EAAE6C,cAAcY,IAAI,CAAC,OAAO;gBAEvF;YACF,OAAO;gBAEL,IAAImB,mBAAmB;gBACvB,IAAI;oBAEF7E,QAAQC,GAAG,CAAC;oBACZ,MAAM6E,oBAAoB,MAAM7I,WAAW,OAAO;wBAAC;wBAAM;wBAAgB;wBAAQ;qBAAU,EAAE;wBAC3FQ,KAAKuE;wBACLpE,QAAQ;wBACRC,QAAQ;wBACRH,KAAKqC,kBAAkB;4BACrBkC,KAAKD;wBACP;oBACF;oBAEA,IAAI8D,kBAAkB7H,OAAO,EAAE;wBAC7B+C,QAAQC,GAAG,CAAC;wBACZ4E,mBAAmB;oBACrB,OAAO;wBACLjJ,aAAa;wBAGb,MAAMwB;wBACNyH,mBAAmB;oBACrB;gBACF,EAAE,OAAOvE,KAAK;oBACZ1E,aAAa;oBAGb,MAAMwB;oBACNyH,mBAAmB;gBACrB;gBAGA,IAAIA,kBAAkB;oBACpB,IAAI;wBACF,IAAIhC,eAAe;4BACjB,MAAMvF,mCAAmC0D,YAAY8B;wBACvD,OAAO;4BACL,MAAMzF,0BAA0B2D;wBAClC;oBACF,EAAE,OAAOV,KAAK,CAGd;gBACF;YACF;QACF;QAEA,IAAIsC,YAAY;YACdlH,aAAa;YACbsE,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CACT,CAAC,mBAAmB,EAAE4C,gBAAgB,+BAA+BH,YAAY,mBAAmB,YAAY;YAElH1C,QAAQC,GAAG,CACT,CAAC,mBAAmB,EAAE4C,gBAAgB,sCAAsC,YAAY;YAE1F7C,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ,IAAIyC,WAAW;gBACb1C,QAAQC,GAAG,CACT,CAAC,gCAAgC,EAAE6C,gBAAgBA,cAAcW,MAAM,GAAG,MAAM,oBAAoB,CAAC;gBAEvGzD,QAAQC,GAAG,CAAC;YACd;YACA,IAAI4C,eAAe;gBACjB7C,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;YACAD,QAAQC,GAAG,CAAC;QACd,OAAO;YACLvE,aAAa;YAEb,IAAImH,eAAe;gBACjB7C,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;YAEAD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CACT,CAAC,eAAe,EAAE4C,gBAAgB,yBAAyBH,YAAY,mBAAmB,yBAAyB,CAAC,CAAC;YAEvH1C,QAAQC,GAAG,CACT,CAAC,oBAAoB,EAAE4C,gBAAgB,6BAA6B,yBAAyB,CAAC,CAAC;YAEjG7C,QAAQC,GAAG,CACT,CAAC,qBAAqB,EAAE4C,gBAAgB,6BAA6B,wBAAwB,CAAC,CAAC;YAEjG7C,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YAEZ,IAAIyC,WAAW;gBACb,MAAMqC,YAAYjC,gBAAgBA,cAAcW,MAAM,GAAG;gBACzDzD,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAE8E,UAAU,aAAa,CAAC;gBACvE/E,QAAQC,GAAG,CAAC;YACd;YAEAD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YAEZ,IAAIyC,WAAW;gBACb1C,QAAQC,GAAG,CACT;gBAEFD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBAEZ,IAAI4C,eAAe;oBACjB7C,QAAQC,GAAG,CAAC;oBACZD,QAAQC,GAAG,CAAC;oBACZD,QAAQC,GAAG,CAAC;gBACd;YACF;YAGA,MAAM+E,kBAAkB,MAAMhG,gBAAgBgC,YAAYwB,WAAWI;YACrE,IAAIoC,gBAAgB/H,OAAO,EAAE;gBAC3B,IAAI,CAAC2F,YAAY;oBACf5C,QAAQC,GAAG,CAAC,CAAC,IAAI,EAAE+E,gBAAgBzE,OAAO,EAAE;gBAC9C,OAAO;oBACLP,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAE+E,gBAAgBzE,OAAO,EAAE;gBAC5C;YACF,OAAO;gBACLP,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAE+E,gBAAgBzE,OAAO,EAAE;YAChD;YAEAP,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YAEZ,IAAI4C,eAAe;gBACjB7C,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;YAGAD,QAAQC,GAAG,CAAC;YACZ,IAAI;gBACF,MAAMgF,kBAAkB;oBACtB7C,QAAQ;wBACN8C,aAAa;4BACXC,YAAY;gCAAEC,SAASvF;4BAAwB;4BAC/CwF,UAAU;gCAAED,SAAS;4BAAK;wBAC5B;wBACAE,YAAY;4BAAEF,SAAS;wBAAM;oBAC/B;gBACF;gBAEA,MAAMG,iBAAiB,MAAM7F,mBAAmBsB,YAAYiE,iBAAiB;gBAE7E,IAAIM,eAAetI,OAAO,EAAE;oBAC1B+C,QAAQC,GAAG,CAAC;oBACZD,QAAQC,GAAG,CAAC;gBACd,OAAO;oBACLD,QAAQC,GAAG,CAAC,CAAC,+BAA+B,EAAEsF,eAAeC,KAAK,EAAE;gBACtE;YACF,EAAE,OAAOlF,KAAK;gBACZN,QAAQC,GAAG,CAAC,CAAC,+BAA+B,EAAEK,IAAIC,OAAO,EAAE;YAC7D;YAGA,IAAI,CAACqC,cAAc/C,yBAAyB;gBAC1CG,QAAQC,GAAG,CAAC;gBACZ,MAAMwF,UAAU/E,WAAWA,QAAQI,QAAQ,IAAIJ,QAAQI,QAAQ,CAAC;gBAEhE,IAAI,CAAC2E,SAAS;oBACZ,MAAM3F,gBAAgB8C;gBACxB,OAAO;oBACL5C,QAAQC,GAAG,CAAC;gBACd;YACF,OAAO,IAAI,CAAC2C,cAAc,CAAC/C,yBAAyB;gBAClDG,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;QACF;IACF,EAAE,OAAOK,KAAK;QACZ3E,WAAW,CAAC,4BAA4B,EAAE2E,IAAIC,OAAO,EAAE;IACzD;AACF;AAGA,eAAe8B,gBAAgB3B,OAAO,EAAEC,KAAK;IAC3C,IAAI;QAEF,MAAMvE,UAAU;YACdsJ,UAAU,CAAC/E,KAAK,CAAC,cAAc,IAAIA,MAAM+E,QAAQ,KAAK;YACtD7D,OAAOlB,MAAMkB,KAAK,IAAIlB,MAAMgF,CAAC;YAC7B/D,SAASjB,MAAMiB,OAAO,IAAIjB,MAAMiF,CAAC;YACjC1E,OAAOP,MAAMO,KAAK,IAAIP,MAAMQ,CAAC;YAC7B0E,gBAAgBlF,KAAK,CAAC,iBAAiB,IAAI;YAC3CmF,kBAAkB;YAClBC,UAAUpF,MAAMoF,QAAQ;YACxBC,cAAcrF,MAAMqF,YAAY,GAC5BrF,MAAMqF,YAAY,CAAChD,KAAK,CAAC,KAAKiD,GAAG,CAAC,CAACvJ,MAAQA,IAAIwJ,IAAI,MACnD;gBAAC;aAAM;QACb;QAGA,MAAMC,mBAAmB9H,qBAAqBjC;QAC9C,IAAI+J,iBAAiB1C,MAAM,GAAG,GAAG;YAC/B9H,WAAW;YACXwK,iBAAiBvB,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;YAChE;QACF;QAGA,IAAI7E,MAAMyB,MAAM,EAAE;YAChB,MAAMgE,aAAazF,MAAMyB,MAAM;YAC/B1G,aAAa,CAAC,kCAAkC,EAAE0K,YAAY;YAC9D,MAAMC,UAAU,MAAMjI,oBAAoBgI,YAAYhK;YACtD,IAAIiK,SAAS;gBACX3K,aAAa;YACf;YACA;QACF;QAGA,IAAIiF,KAAK,CAAC,aAAa,EAAE;YACvB,MAAM2F,iBAAiB3F,KAAK,CAAC,aAAa;YAC1C,MAAM4F,WAAWD,eAAetD,KAAK,CAAC,KAAKiD,GAAG,CAAC,CAACO,UAAYA,QAAQN,IAAI;YAExE,IAAIK,SAAS9C,MAAM,KAAK,GAAG;gBACzB9H,WAAW;gBACX;YACF;YAEAD,aAAa,CAAC,aAAa,EAAE6K,SAAS9C,MAAM,CAAC,uBAAuB,CAAC;YACrE,MAAM4C,UAAU,MAAMlI,iBAAiBoI,UAAUnK;YAEjD,IAAIiK,SAAS;gBACX,MAAMI,aAAaJ,QAAQK,MAAM,CAAC,CAACC,IAAMA,EAAE1J,OAAO,EAAEwG,MAAM;gBAC1D,MAAMmD,SAASP,QAAQK,MAAM,CAAC,CAACC,IAAM,CAACA,EAAE1J,OAAO,EAAEwG,MAAM;gBAEvD,IAAImD,WAAW,GAAG;oBAChBlL,aAAa,CAAC,IAAI,EAAE+K,WAAW,kCAAkC,CAAC;gBACpE,OAAO;oBACL7K,aAAa,GAAG6K,WAAW,qBAAqB,EAAEG,OAAO,OAAO,CAAC;gBACnE;YACF;YACA;QACF;QAEAjL,WAAW;IACb,EAAE,OAAO2E,KAAK;QACZ3E,WAAW,CAAC,6BAA6B,EAAE2E,IAAIC,OAAO,EAAE;IAC1D;AACF;AAKA,eAAegC,oBAAoB7B,OAAO,EAAEC,KAAK;IAC/CX,QAAQC,GAAG,CAAC;IAGZ,MAAM9D,OAAOuE,WAAW,EAAE;IAC1B,MAAMtE,UAAUuE,SAAS,CAAC;IAG1B,MAAMK,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAInF,QAAQW,GAAG;IAGjD,MAAMoK,iBAAiB,IAAIrI,eAAewC;IAC1C,MAAM8F,mBAAmB,IAAIxI,iBAAiB0C;IAE9C,IAAI+F,WAAW;IAEf,IAAI;QAEF,MAAMC,cAAc;YAClB9F,OAAO/E,KAAK2E,QAAQ,CAAC,cAAc3E,KAAK2E,QAAQ,CAAC,SAAS1E,QAAQ8E,KAAK;YACvEU,SAASzF,KAAK2E,QAAQ,CAAC,gBAAgB3E,KAAK2E,QAAQ,CAAC,SAAS1E,QAAQwF,OAAO;YAC7EC,OAAO1F,KAAK2E,QAAQ,CAAC,cAAc3E,KAAK2E,QAAQ,CAAC,SAAS1E,QAAQyF,KAAK;YACvEoF,mBAAmB9K,KAAK2E,QAAQ,CAAC;YACjCoG,YAAY/K,KAAK2E,QAAQ,CAAC;YAC1BqG,cAAchL,KAAK2E,QAAQ,CAAC;QAC9B;QAGA,IAAI,CAACkG,YAAYC,iBAAiB,EAAE;YAClCjH,QAAQC,GAAG,CAAC;YACZ,MAAMmH,gBAAgB,MAAMN,iBAAiBO,eAAe,CAACL;YAE7D,IAAI,CAACI,cAAcnK,OAAO,EAAE;gBAC1BtB,WAAW;gBACXyL,cAAczC,MAAM,CAACC,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;gBACpE;YACF;YAEA,IAAI4B,cAAcE,QAAQ,CAAC7D,MAAM,GAAG,GAAG;gBACrC7H,aAAa;gBACbwL,cAAcE,QAAQ,CAAC1C,OAAO,CAAC,CAAC2C,UAAYvH,QAAQwH,IAAI,CAAC,CAAC,MAAM,EAAED,SAAS;YAC7E;YAEA7L,aAAa;QACf;QAGA,IAAIU,QAAQ+K,YAAY,EAAE;YACxBnH,QAAQC,GAAG,CAAC;YACZ;QACF;QAGA,IAAI,CAAC7D,QAAQ8K,UAAU,EAAE;YACvBlH,QAAQC,GAAG,CAAC;YACZ,MAAMwH,eAAe,MAAMZ,eAAea,mBAAmB;YAE7D,IAAI,CAACD,aAAaxK,OAAO,EAAE;gBACzBtB,WAAW;gBACX8L,aAAa9C,MAAM,CAACC,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;gBACnE;YACF;QACF;QAGAxF,QAAQC,GAAG,CAAC;QACZ8G,WAAWtI,sBAAsBoI,gBAAgB;QAEjD,MAAMc,cAAc,MAAMZ,SAASa,KAAK;QACxC,IAAI,CAACD,aAAa;YAChBhM,WAAW;YACX;QACF;QAGA,MAAMkM,qCAAqChB,gBAAgBzK,SAAS4E,YAAYjB;QAGhFC,QAAQC,GAAG,CAAC;QACZ,MAAM6H,iBAAiB,MAAMhB,iBAAiBiB,gBAAgB;QAE9D,IAAI,CAACD,eAAe7K,OAAO,EAAE;YAC3BtB,WAAW;YACXmM,eAAenD,MAAM,CAACC,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;YAGrExF,QAAQC,GAAG,CAAC;YACZ,MAAM8G,SAASiB,QAAQ;YACvBpM,aAAa;YACb;QACF;QAGAoE,QAAQC,GAAG,CAAC;QACZ,MAAMgI,mBAAmB,MAAMnB,iBAAiBoB,qBAAqB;QAErE,IAAID,iBAAiBX,QAAQ,CAAC7D,MAAM,GAAG,GAAG;YACxC7H,aAAa;YACbqM,iBAAiBX,QAAQ,CAAC1C,OAAO,CAAC,CAAC2C,UAAYvH,QAAQwH,IAAI,CAAC,CAAC,MAAM,EAAED,SAAS;QAChF;QAGAvH,QAAQC,GAAG,CAAC;QACZ,MAAMkI,eAAe,MAAMrB,iBAAiBsB,eAAe;QAE3D,IAAID,aAAab,QAAQ,CAAC7D,MAAM,GAAG,GAAG;YACpC7H,aAAa;YACbuM,aAAab,QAAQ,CAAC1C,OAAO,CAAC,CAAC2C,UAAYvH,QAAQwH,IAAI,CAAC,CAAC,MAAM,EAAED,SAAS;QAC5E;QAGA,MAAMR,SAASsB,MAAM;QAGrB,MAAMC,iBAAiB,MAAM/J,kBAAkByC,YAAY;YACzDuH,UAAU;YACVC,aAAapM,QAAQ6K,iBAAiB;QACxC;QAEAjH,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAACqI,eAAeG,MAAM;QAEjC/M,aAAa;QACbsE,QAAQC,GAAG,CAAC;IACd,EAAE,OAAOuF,OAAO;QACd7J,WAAW,CAAC,gCAAgC,EAAE6J,MAAMjF,OAAO,EAAE;QAG7D,IAAIwG,YAAY,CAACA,SAAS2B,SAAS,EAAE;YACnC1I,QAAQC,GAAG,CAAC;YACZ,IAAI;gBACF,MAAM8G,SAASiB,QAAQ;gBACvBpM,aAAa;YACf,EAAE,OAAO+M,eAAe;gBACtBhN,WAAW,CAAC,sBAAsB,EAAEgN,cAAcpI,OAAO,EAAE;YAC7D;QACF;IACF;AACF;AAKA,eAAewB,wBAAwBrB,OAAO,EAAEC,KAAK;IACnD,MAAMK,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAInF,QAAQW,GAAG;IAEjDuD,QAAQC,GAAG,CAAC;IAEZ,MAAM7D,UAAU;QACdoM,aAAa9H,QAAQI,QAAQ,CAAC;QAC9B8H,YAAYlI,QAAQI,QAAQ,CAAC;QAC7B+H,cAAcnI,QAAQI,QAAQ,CAAC;QAC/ByH,UAAU,CAAC7H,QAAQI,QAAQ,CAAC;IAC9B;IAEA,IAAI;QACF,MAAMgI,oBAAoB,MAAMvK,kBAAkByC,YAAY5E;QAE9D4D,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC6I,kBAAkBL,MAAM;QAEpC,IAAIK,kBAAkB7L,OAAO,EAAE;YAC7BvB,aAAa;QACf,OAAO;YACLC,WAAW;YACXG,QAAQiN,IAAI,CAAC;QACf;IACF,EAAE,OAAOvD,OAAO;QACd7J,WAAW,CAAC,mBAAmB,EAAE6J,MAAMjF,OAAO,EAAE;QAChDzE,QAAQiN,IAAI,CAAC;IACf;AACF;AAKA,eAAe/G,sBAAsBtB,OAAO,EAAEC,KAAK;IACjD,MAAMK,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAInF,QAAQW,GAAG;IACjD,MAAMoK,iBAAiB,IAAIrI,eAAewC;IAE1C,IAAI;QAEF,IAAIN,QAAQI,QAAQ,CAAC,WAAW;YAC9Bd,QAAQC,GAAG,CAAC;YACZ,MAAMmB,SAAS,MAAMyF,eAAemC,mBAAmB;YAEvD,IAAI5H,OAAOnE,OAAO,EAAE;gBAClBvB,aAAa;YACf,OAAO;gBACLC,WAAW;gBACXyF,OAAOuD,MAAM,CAACC,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;YAC/D;QACF,OAAO,IAAI9E,QAAQI,QAAQ,CAAC,cAAc;YACxC,MAAMmI,aAAavI,QAAQwI,SAAS,CAAC,CAACC,MAAQA,QAAQ;YACtD,IAAIF,eAAe,CAAC,KAAKvI,OAAO,CAACuI,aAAa,EAAE,EAAE;gBAChD,MAAMG,QAAQ1I,OAAO,CAACuI,aAAa,EAAE;gBACrCjJ,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAEmJ,OAAO;gBAEhE,MAAMhI,SAAS,MAAMyF,eAAewC,sBAAsB,CAACD;gBAE3D,IAAIhI,OAAOnE,OAAO,EAAE;oBAClBvB,aAAa,CAAC,sCAAsC,EAAE0N,OAAO;gBAC/D,OAAO;oBACLzN,WAAW,CAAC,mCAAmC,EAAEyN,OAAO;oBACxDhI,OAAOuD,MAAM,CAACC,OAAO,CAAC,CAACY,QAAUxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAEA,OAAO;gBAC/D;YACF,OAAO;gBACL7J,WAAW;YACb;QACF,OAAO;YAEL,MAAM2N,iBAAiB,MAAMzC,eAAe0C,kBAAkB;YAE9D,IAAID,eAAeA,cAAc,CAAC7F,MAAM,KAAK,GAAG;gBAC9C7H,aAAa;gBACb;YACF;YAEAoE,QAAQC,GAAG,CAAC;YACZqJ,eAAeA,cAAc,CAAC1E,OAAO,CAAC,CAAC4E,OAAOC;gBAC5C,MAAMC,OAAO,IAAIC,KAAKH,MAAMI,SAAS,EAAEC,cAAc;gBACrD7J,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEwJ,QAAQ,EAAE,EAAE,EAAED,MAAMM,IAAI,CAAC,GAAG,EAAEJ,MAAM;YACvD;YAGA,MAAMK,SAAST,eAAeA,cAAc,CAAC,EAAE;YAC/C,IAAIS,QAAQ;gBACV/J,QAAQC,GAAG,CACT,CAAC,sBAAsB,EAAE8J,OAAOD,IAAI,CAAC,EAAE,EAAE,IAAIH,KAAKI,OAAOH,SAAS,EAAEC,cAAc,GAAG,CAAC,CAAC;gBAEzF,MAAMzI,SAAS,MAAMyF,eAAemC,mBAAmB,CAACe,OAAOC,QAAQ;gBAEvE,IAAI5I,OAAOnE,OAAO,EAAE;oBAClBvB,aAAa;gBACf,OAAO;oBACLC,WAAW;gBACb;YACF;QACF;IACF,EAAE,OAAO6J,OAAO;QACd7J,WAAW,CAAC,2BAA2B,EAAE6J,MAAMjF,OAAO,EAAE;IAC1D;AACF;AAKA,eAAe0B,kBAAkBvB,OAAO,EAAEC,KAAK;IAC7C,MAAMK,aAAalF,QAAQY,GAAG,CAACuE,GAAG,IAAInF,QAAQW,GAAG;IACjD,MAAMoK,iBAAiB,IAAIrI,eAAewC;IAE1C,IAAI;QACF,MAAMsI,iBAAiB,MAAMzC,eAAe0C,kBAAkB;QAE9DvJ,QAAQC,GAAG,CAAC;QAEZ,IAAIqJ,eAAeA,cAAc,CAAC7F,MAAM,KAAK,GAAG;YAC9CzD,QAAQC,GAAG,CAAC;QACd,OAAO;YACLD,QAAQC,GAAG,CAAC;YACZqJ,eAAeA,cAAc,CAAC1E,OAAO,CAAC,CAAC4E,OAAOC;gBAC5C,MAAMC,OAAO,IAAIC,KAAKH,MAAMI,SAAS,EAAEC,cAAc;gBACrD7J,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEwJ,QAAQ,EAAE,EAAE,EAAED,MAAMM,IAAI,CAAC,GAAG,EAAEJ,KAAK,EAAE,EAAEF,MAAMQ,QAAQ,IAAI,YAAY,CAAC,CAAC;YAC1F;QACF;QAEA,IAAIV,eAAeW,WAAW,CAACxG,MAAM,GAAG,GAAG;YACzCzD,QAAQC,GAAG,CAAC;YACZqJ,eAAeW,WAAW,CAACC,KAAK,CAAC,CAAC,GAAGtF,OAAO,CAAC,CAACuF,YAAYV;gBACxD,MAAMC,OAAO,IAAIC,KAAKQ,WAAWP,SAAS,EAAEC,cAAc;gBAC1D7J,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEwJ,QAAQ,EAAE,EAAE,EAAEU,WAAWf,KAAK,CAAC,GAAG,EAAEM,KAAK,EAAE,EAAES,WAAWC,MAAM,CAAC,CAAC,CAAC;YACpF;QACF;IACF,EAAE,OAAO5E,OAAO;QACd7J,WAAW,CAAC,wBAAwB,EAAE6J,MAAMjF,OAAO,EAAE;IACvD;AACF;AAKA,eAAesH,qCACbhB,cAAc,EACdzK,OAAO,EACP4E,UAAU,EACVjB,UAAS,KAAK;IAEd,MAAMsK,SAAS;QACb;YAAElK,MAAM;YAAiBmK,QAAQ,IAAMC,mBAAmBnO,SAAS4E,YAAYjB;QAAQ;QACvF;YAAEI,MAAM;YAAuBmK,QAAQ,IAAME,yBAAyBxJ,YAAYjB;QAAQ;QAC1F;YAAEI,MAAM;YAAgBmK,QAAQ,IAAMG,kBAAkBzJ,YAAYjB;QAAQ;QAC5E;YAAEI,MAAM;YAAsBmK,QAAQ,IAAMI,wBAAwB1J,YAAYjB;QAAQ;QACxF;YAAEI,MAAM;YAAuBmK,QAAQ,IAAMnN,sBAAsB6D,YAAYjB;QAAQ;KACxF;IAED,IAAI3D,QAAQyF,KAAK,EAAE;QACjBwI,OAAO7G,IAAI,CACT;YAAErD,MAAM;YAAcmK,QAAQ,IAAMlN;QAA+B,GACnE;YAAE+C,MAAM;YAAmBmK,QAAQ,IAAMjN,0BAA0B2D;QAAY;IAEnF;IAEA,KAAK,MAAMoI,SAASiB,OAAQ;QAC1BrK,QAAQC,GAAG,CAAC,CAAC,KAAK,EAAEmJ,MAAMjJ,IAAI,CAAC,GAAG,CAAC;QAGnC,MAAM0G,eAAe8D,gBAAgB,CAACvB,MAAMjJ,IAAI,EAAE;YAChDyJ,WAAWD,KAAKiB,GAAG;YACnBxB,OAAOA,MAAMjJ,IAAI;QACnB;QAEA,IAAI;YACF,MAAMiJ,MAAMkB,MAAM;YAClBtK,QAAQC,GAAG,CAAC,CAAC,IAAI,EAAEmJ,MAAMjJ,IAAI,CAAC,UAAU,CAAC;QAC3C,EAAE,OAAOqF,OAAO;YACdxF,QAAQwF,KAAK,CAAC,CAAC,IAAI,EAAE4D,MAAMjJ,IAAI,CAAC,SAAS,EAAEqF,MAAMjF,OAAO,EAAE;YAC1D,MAAMiF;QACR;IACF;AACF;AAGA,eAAe+E,mBAAmBnO,OAAO,EAAE4E,UAAU,EAAEjB,UAAS,KAAK;IACnE,IAAI,CAACA,SAAQ;QACX,MAAM8K,WAAWzO,QAAQyF,KAAK,GAC1B3C,wBACA9C,QAAQwF,OAAO,GACbzC,0BACAF;QACN,MAAMzB,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,UAAU,CAAC,EAAE6J,UAAU;QAExD,MAAMC,eAAe1O,QAAQwF,OAAO,GAAGvC,8BAA8BD;QACrE,MAAM5B,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,eAAe,CAAC,EAAE8J,cAAc;QAEjE,MAAMC,iBAAiB3O,QAAQwF,OAAO,GAClCrC,gCACAD;QACJ,MAAM9B,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,gBAAgB,CAAC,EAAE+J,gBAAgB;IACtE;AACF;AAEA,eAAeP,yBAAyBxJ,UAAU,EAAEjB,UAAS,KAAK;IAChE,MAAMiL,cAAc;QAClB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,IAAI,CAACjL,SAAQ;QACX,KAAK,MAAMkL,OAAOD,YAAa;YAC7B,MAAMxN,GAAGwG,KAAK,CAAC,GAAGhD,WAAW,CAAC,EAAEiK,KAAK,EAAE;gBAAEhH,WAAW;YAAK;QAC3D;IACF;AACF;AAEA,eAAewG,kBAAkBzJ,UAAU,EAAEjB,UAAS,KAAK;IACzD,IAAI,CAACA,SAAQ;QACX,MAAMmL,cAAc;YAAEC,QAAQ,EAAE;YAAEC,OAAO,EAAE;YAAEC,aAAa1B,KAAKiB,GAAG;QAAG;QACrE,MAAMpN,GAAGuG,SAAS,CAChB,GAAG/C,WAAW,mCAAmC,CAAC,EAAEsK,KAAKC,SAAS,CAACL,aAAa,MAAM,IAAI;QAG5F,MAAM1N,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,wBAAwB,CAAC,EAAExB,sBAAsB;QAClF,MAAMhC,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,0BAA0B,CAAC,EAAEvB,wBAAwB;IACxF;AACF;AAEA,eAAeiL,wBAAwB1J,UAAU,EAAEjB,UAAS,KAAK,GAGjE;AAKA,eAAeyL,gBAAgBxK,UAAU;IACvChB,QAAQC,GAAG,CAAC;IAEZ,MAAMzC,KAAK,MAAM,MAAM,CAAC;IACxB,MAAMiO,OAAO,MAAM,MAAM,CAAC;IAE1B,IAAI;QAEF,MAAMC,cAAcD,KAAK/H,IAAI,CAAC1C,YAAY;QAC1C,MAAMxD,GAAGwG,KAAK,CAAC0H,aAAa;YAAEzH,WAAW;QAAK;QAG9C,MAAM0H,iBAAiBF,KAAK/H,IAAI,CAACgI,aAAa;QAC9C,MAAMR,cAAc;YAClBU,OAAO;YACPC,OAAO;YACPC,QAAQ;YACRC,SAAS,CAAC;YACVV,aAAa,IAAI1B,OAAOqC,WAAW;QACrC;QAEA,MAAMxO,GAAGuG,SAAS,CAAC4H,gBAAgBL,KAAKC,SAAS,CAACL,aAAa,MAAM;QACrExP,aAAa;QAGb,MAAMuQ,eAAeR,KAAK/H,IAAI,CAAC1C,YAAY,WAAW;QACtD,IAAI;YACF,MAAMkL,kBAAkB,MAAM1O,GAAG2O,QAAQ,CAACF,cAAc;YACxD,MAAMG,WAAWd,KAAKe,KAAK,CAACH;YAG5B,IAAI,CAACE,SAASE,KAAK,EAAEF,SAASE,KAAK,GAAG,CAAC;YACvC,IAAI,CAACF,SAASE,KAAK,CAAC,YAAY,EAAEF,SAASE,KAAK,CAAC,YAAY,GAAG,EAAE;YAGlE,MAAMC,oBAAoB;YAC1B,IAAI,CAACH,SAASE,KAAK,CAAC,YAAY,CAACxL,QAAQ,CAACyL,oBAAoB;gBAC5DH,SAASE,KAAK,CAAC,YAAY,CAAC9I,IAAI,CAAC+I;YACnC;YAEA,MAAM/O,GAAGuG,SAAS,CAACkI,cAAcX,KAAKC,SAAS,CAACa,UAAU,MAAM;YAChE1Q,aAAa;QACf,EAAE,OAAO4E,KAAK;YACZN,QAAQC,GAAG,CAAC,yCAAyCK,IAAIC,OAAO;QAClE;QAGA,MAAMiM,mBAAmB;YACvBpH,SAAS;YACTqH,WAAW;gBACTtH,YAAY;oBACVzI,KAAK;oBACLgQ,OAAO;oBACPtM,aAAa;gBACf;YACF;YACAuM,UAAU;gBACRC,QAAQ;gBACRC,OAAO;gBACP1B,QAAQ;gBACR2B,UAAU;YACZ;YACAC,SAAS;gBACPC,UAAU;gBACVC,QAAQ;gBACRC,UAAU;YACZ;QACF;QAEA,MAAMC,aAAa1B,KAAK/H,IAAI,CAACgI,aAAa;QAC1C,MAAMlO,GAAGuG,SAAS,CAACoJ,YAAY7B,KAAKC,SAAS,CAACiB,kBAAkB,MAAM;QACtE9Q,aAAa;QAGb,MAAM0R,aAAa,CAAC;;;;;;;AAOxB,CAAC;QAEG,MAAMC,UAAU5B,KAAK/H,IAAI,CAACgI,aAAa;QACvC,MAAMlO,GAAGuG,SAAS,CAACsJ,SAASD,WAAWlH,IAAI;QAC3CxK,aAAa;QAEbsE,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOK,KAAK;QACZ3E,WAAW,CAAC,8BAA8B,EAAE2E,IAAIC,OAAO,EAAE;IAC3D;AACF;AAKA,eAAeuB,uBAAuBnB,KAAK,EAAED,UAAU,EAAE;IACvDV,QAAQC,GAAG,CAAC;IAEZ,MAAMe,aAAalF,QAAQW,GAAG;IAC9B,MAAMyE,QAAQP,MAAMO,KAAK,IAAIP,MAAMQ,CAAC;IACpC,MAAMpB,UAASY,MAAMZ,MAAM,IAAIY,KAAK,CAAC,UAAU,IAAIA,MAAM2M,CAAC;IAC1D,MAAM5K,YAAY/B,MAAMgC,GAAG,IAAKjC,WAAWA,QAAQI,QAAQ,CAAC;IAG5D,MAAMyM,YAAY5M,MAAM6M,KAAK,IAAK9M,WAAWA,QAAQ+M,IAAI,CAACtE,CAAAA,MAAOA,IAAIuE,UAAU,CAAC,cAAc1K,MAAM,IAAI,CAAC,EAAE;IAC3G,MAAM2K,gBAAgBJ,cAAc,eAAgB7M,WAAWA,QAAQI,QAAQ,CAAC,cAAcJ,QAAQI,QAAQ,CAAC;IAG/G,MAAM3E,OAAOuE,WAAW,EAAE;IAC1B,MAAMtE,UAAUuE,SAAS,CAAC;IAG1B,MAAMnD,KAAK,MAAM,MAAM,CAAC;IACxB,MAAM,EAAEoQ,KAAK,EAAE,GAAGpQ;IAClB,MAAMiO,OAAO,MAAM,MAAM,CAAC;IAC1B,MAAMoC,KAAK,MAAM,MAAM,CAAC;IAExB,IAAI;QAEF,MAAMxK,gBAAgB,EAAE;QACxB,MAAMyK,eAAe;YACnB;YACA;YACA;SAED;QAED,KAAK,MAAMxK,QAAQwK,aAAc;YAC/B,IAAIjS,WAAW,GAAGmF,WAAW,CAAC,EAAEsC,MAAM,GAAG;gBACvCD,cAAcG,IAAI,CAACF;YACrB;QACF;QAEA,IAAID,cAAcI,MAAM,GAAG,KAAK,CAACvC,OAAO;YACtCtF,aAAa,CAAC,mCAAmC,EAAEyH,cAAcK,IAAI,CAAC,OAAO;YAC7E1D,QAAQC,GAAG,CAAC;YACZ;QACF;QAGA,IAAI,CAACF,SAAQ;YACX,MAAMvC,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,UAAU,CAAC,EAAElC,gCAAgC;YAC9EpD,aAAa;QACf,OAAO;YACLsE,QAAQC,GAAG,CAAC;QACd;QAGA,MAAM8N,YAAY,GAAG/M,WAAW,QAAQ,CAAC;QACzC,IAAI,CAACjB,SAAQ;YACX,MAAMvC,GAAGwG,KAAK,CAAC+J,WAAW;gBAAE9J,WAAW;YAAK;YAC5C,MAAMzG,GAAGwG,KAAK,CAAC,GAAG+J,UAAU,SAAS,CAAC,EAAE;gBAAE9J,WAAW;YAAK;YAC1D,MAAMzG,GAAGwG,KAAK,CAAC,GAAG+J,UAAU,QAAQ,CAAC,EAAE;gBAAE9J,WAAW;YAAK;YACzDvI,aAAa;QACf,OAAO;YACLsE,QAAQC,GAAG,CAAC;QACd;QAGA,IAAI,CAACF,SAAQ;YACX,MAAMvC,GAAGuG,SAAS,CAAC,GAAGgK,UAAU,cAAc,CAAC,EAAErP,8BAA8B;YAC/EhD,aAAa;QACf,OAAO;YACLsE,QAAQC,GAAG,CAAC;QACd;QAGA,IAAI;YACF,IAAI+N;YACJ,IAAI;gBAEFA,qBAAqB,MAAMxQ,GAAG2O,QAAQ,CACpCV,KAAK/H,IAAI,CAACuK,WAAW,aAAa,0BAClC;YAEJ,EAAE,OAAM;gBAEND,qBAAqBxN;YACvB;YAEA,IAAI,CAACT,SAAQ;gBAEX,MAAMvC,GAAGuG,SAAS,CAAC,GAAGgK,UAAU,sBAAsB,CAAC,EAAEC,oBAAoB;gBAC7E,MAAMxQ,GAAGoQ,KAAK,CAAC,GAAGG,UAAU,sBAAsB,CAAC,EAAE;gBAGrD,MAAMG,gBAAgBzC,KAAK/H,IAAI,CAACmK,GAAGM,OAAO,IAAI;gBAC9C,MAAM3Q,GAAGwG,KAAK,CAACkK,eAAe;oBAAEjK,WAAW;gBAAK;gBAChD,MAAMzG,GAAGuG,SAAS,CAAC0H,KAAK/H,IAAI,CAACwK,eAAe,0BAA0BF,oBAAoB;gBAC1F,MAAMxQ,GAAGoQ,KAAK,CAACnC,KAAK/H,IAAI,CAACwK,eAAe,0BAA0B;gBAElExS,aAAa;YACf,OAAO;gBACLsE,QAAQC,GAAG,CAAC;YACd;QACF,EAAE,OAAOK,KAAK;YAEZ,IAAI,CAACP,SAAQ;gBACXC,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC,CAAC,aAAa,EAAEK,IAAIC,OAAO,EAAE;YAC3C;QACF;QAGA,MAAM6N,gBAAgB;YACpBC,aAAa;gBACXC,OAAO;oBAAC;oBAAkB;oBAA0B;iBAAkB;gBACtEC,MAAM,EAAE;YACV;QACF;QAEA,IAAI,CAACxO,SAAQ;YACX,MAAMvC,GAAGuG,SAAS,CAChB,GAAGgK,UAAU,oBAAoB,CAAC,EAAEzC,KAAKC,SAAS,CAAC6C,eAAe,MAAM,GAAG;YAE7E1S,aAAa;QACf,OAAO;YACLsE,QAAQC,GAAG,CACT;QAEJ;QAGA,MAAMuO,YAAY;YAChBC,YAAY;gBACV,qBAAqB;oBACnBvS,SAAS;oBACTC,MAAM;wBAAC;wBAAqB;wBAAO;qBAAQ;oBAC3C2N,MAAM;gBACR;gBACA,aAAa;oBACX5N,SAAS;oBACTC,MAAM;wBAAC;wBAAoB;wBAAO;qBAAQ;oBAC1C2N,MAAM;gBACR;gBACA,cAAc;oBACZ5N,SAAS;oBACTC,MAAM;wBAAC;wBAAqB;wBAAO;qBAAQ;oBAC3C2N,MAAM;gBACR;gBACA,oBAAoB;oBAClB5N,SAAS;oBACTC,MAAM;wBAAC;wBAA2B;qBAAM;oBACxC2N,MAAM;gBACR;YACF;QACF;QAEA,IAAI,CAAC/J,SAAQ;YACX,MAAMvC,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,UAAU,CAAC,EAAEsK,KAAKC,SAAS,CAACiD,WAAW,MAAM,GAAG;YACjF9S,aAAa;QACf,OAAO;YACLsE,QAAQC,GAAG,CAAC;QACd;QAKA,KAAK,MAAM,CAACyO,UAAUC,SAAS,IAAIC,OAAOC,OAAO,CAAChQ,mBAAoB;YACpE,MAAMiQ,cAAc,GAAGf,UAAU,UAAU,EAAEW,UAAU;YAEvD,IAAI,CAAC3O,SAAQ;gBACX,MAAMvC,GAAGwG,KAAK,CAAC8K,aAAa;oBAAE7K,WAAW;gBAAK;gBAG9C,MAAM8K,iBAAiB,CAAC,EAAE,EAAEL,SAASM,MAAM,CAAC,GAAGC,WAAW,KAAKP,SAASxE,KAAK,CAAC,GAAG;;aAE5E,EAAEwE,SAAS;;;;AAIxB,EAAEC,SAAS1I,GAAG,CAAC,CAACiJ,MAAQ,CAAC,GAAG,EAAEA,IAAI,IAAI,EAAEA,IAAI,IAAI,CAAC,EAAExL,IAAI,CAAC,MAAM;AAC9D,CAAC;gBACO,MAAMlG,GAAGuG,SAAS,CAAC,GAAG+K,YAAY,UAAU,CAAC,EAAEC,gBAAgB;gBAG/D,KAAK,MAAM7S,WAAWyS,SAAU;oBAC9B,MAAMQ,MAAMxQ,iBAAiB+P,UAAUxS;oBACvC,IAAIiT,KAAK;wBACP,MAAM3R,GAAGuG,SAAS,CAAC,GAAG+K,YAAY,CAAC,EAAE5S,QAAQ,GAAG,CAAC,EAAEiT,KAAK;oBAC1D;gBACF;gBAEAnP,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAE0O,SAASlL,MAAM,CAAC,CAAC,EAAEiL,SAAS,aAAa,CAAC;YACvE,OAAO;gBACL1O,QAAQC,GAAG,CAAC,CAAC,uBAAuB,EAAE0O,SAASlL,MAAM,CAAC,CAAC,EAAEiL,SAAS,aAAa,CAAC;YAClF;QACF;QAGA,IAAI,CAAC3O,SAAQ;YACX,MAAM5C,sBAAsB6D,YAAYjB;QAC1C,OAAO;YACLC,QAAQC,GAAG,CAAC;QACd;QAGA,MAAMmP,UAAU;YAAC;YAAgB;YAAkB;YAAmB;YAAkB;YAAgC;SAAwB;QAChJ,KAAK,MAAMC,UAAUD,QAAS;YAC5B,IAAI,CAACrP,SAAQ;gBACX,MAAMuP,UAAU1Q,mBAAmByQ;gBACnC,IAAIC,SAAS;oBACX,MAAM9R,GAAGuG,SAAS,CAAC,GAAGgK,UAAU,SAAS,EAAEsB,QAAQ,EAAEC,SAAS;oBAC9D,MAAM9R,GAAGoQ,KAAK,CAAC,GAAGG,UAAU,SAAS,EAAEsB,QAAQ,EAAE;gBACnD;YACF;QACF;QAEA,IAAI,CAACtP,SAAQ;YACXrE,aAAa,CAAC,UAAU,EAAE0T,QAAQ3L,MAAM,CAAC,eAAe,CAAC;QAC3D,OAAO;YACLzD,QAAQC,GAAG,CAAC,CAAC,uBAAuB,EAAEmP,QAAQ3L,MAAM,CAAC,eAAe,CAAC;QACvE;QAGA,MAAM8L,eAAe;YACnB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,KAAK,MAAMtE,OAAOsE,aAAc;YAC9B,IAAI,CAACxP,SAAQ;gBACX,MAAMvC,GAAGwG,KAAK,CAAC,GAAGhD,WAAW,CAAC,EAAEiK,KAAK,EAAE;oBAAEhH,WAAW;gBAAK;YAC3D;QACF;QAEA,IAAI,CAAClE,SAAQ;YACXrE,aAAa;YAGb,MAAMwP,cAAc;gBAAEC,QAAQ,EAAE;gBAAEC,OAAO,EAAE;gBAAEC,aAAa1B,KAAKiB,GAAG;YAAG;YACrE,MAAMpN,GAAGuG,SAAS,CAChB,GAAG/C,WAAW,mCAAmC,CAAC,EAAEsK,KAAKC,SAAS,CAACL,aAAa,MAAM,GAAG;YAI3F,MAAM1N,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,wBAAwB,CAAC,EAAExB,sBAAsB;YAClF,MAAMhC,GAAGuG,SAAS,CAAC,GAAG/C,WAAW,0BAA0B,CAAC,EAAEvB,wBAAwB;YAEtF/D,aAAa;YAGb,IAAI;gBAEF,MAAM8T,SAAS;gBACf,MAAM,EAAE3T,UAAU,EAAE,GAAG,MAAM,MAAM,CAAC;gBACpC,MAAM4T,kBAAkB5T,WAAW2T;gBAInC,IAAIC,iBAAiB;oBACnBzP,QAAQC,GAAG,CAAC;oBAEZ,IAAI;wBACF,MAAM,EACJyP,uBAAuB,EACvBC,wBAAwB,EACxBC,oBAAoB,EACrB,GAAG,MAAM,MAAM,CAAC;wBAGjB9T,QAAQY,GAAG,CAACmT,mBAAmB,GAAGL;wBAElC,MAAMM,aAAa,MAAMH;wBAEzB,IAAIG,WAAWxO,MAAM,EAAE;4BACrBtB,QAAQC,GAAG,CAAC;wBACd,OAAO,IAAIiB,OAAO;4BAEhBlB,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAE6P,WAAWC,aAAa,CAACtM,MAAM,CAAC,eAAe,CAAC;4BACxFzD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAE6P,WAAWC,aAAa,CAACrM,IAAI,CAAC,OAAO;4BAElE,MAAMsM,kBAAkB,MAAMJ;4BAE9B,IAAII,gBAAgB/S,OAAO,EAAE;gCAC3BvB,aAAa,CAAC,8BAA8B,EAAEsU,gBAAgBC,WAAW,EAAExM,UAAU,EAAE,OAAO,CAAC;gCAC/FzD,QAAQC,GAAG,CAAC;4BACd,OAAO;gCACLD,QAAQC,GAAG,CAAC,CAAC,wBAAwB,EAAE+P,gBAAgBzP,OAAO,EAAE;gCAChEP,QAAQC,GAAG,CAAC;4BACd;wBACF,OAAO;4BAELD,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAE6P,WAAWC,aAAa,CAACtM,MAAM,CAAC,6BAA6B,CAAC;4BAChGzD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAE6P,WAAWC,aAAa,CAACrM,IAAI,CAAC,OAAO;4BAClE1D,QAAQC,GAAG,CAAC;4BACZD,QAAQC,GAAG,CAAC;wBACd;oBACF,EAAE,OAAOiQ,OAAO;wBACdlQ,QAAQC,GAAG,CAAC,CAAC,kCAAkC,EAAEiQ,MAAM3P,OAAO,EAAE;wBAChEP,QAAQC,GAAG,CAAC;oBACd;gBACF;gBAGA,MAAM,EAAEkQ,mBAAmB,EAAE,GAAG,MAAM,MAAM,CAAC;gBAC7C,MAAMC,cAAc,IAAID;gBACxB,MAAMC,YAAYC,UAAU;gBAE5B,IAAID,YAAYE,eAAe,IAAI;oBACjC5U,aAAa;oBACbsE,QAAQC,GAAG,CACT;gBAEJ,OAAO;oBACLvE,aAAa;oBAGb,IAAI,CAAC+T,iBAAiB;wBACpB,IAAI;4BACF,MAAM,EACJC,uBAAuB,EACxB,GAAG,MAAM,MAAM,CAAC;4BAGjB5T,QAAQY,GAAG,CAACmT,mBAAmB,GAAGL;4BAElCxP,QAAQC,GAAG,CAAC;4BACZ,MAAMyP;4BACNhU,aAAa;wBACf,EAAE,OAAOwU,OAAO;4BACdlQ,QAAQC,GAAG,CAAC,CAAC,2CAA2C,EAAEiQ,MAAM3P,OAAO,EAAE;4BACzEP,QAAQC,GAAG,CAAC;wBACd;oBACF;gBACF;gBAEAmQ,YAAYG,KAAK;YACnB,EAAE,OAAOjQ,KAAK;gBACZN,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAEK,IAAIC,OAAO,EAAE;gBACtEP,QAAQC,GAAG,CAAC;YACd;YAGAD,QAAQC,GAAG,CAAC;YACZ,IAAI;gBACF,MAAMgF,kBAAkB;oBACtB7C,QAAQ;wBACN8C,aAAa;4BACXC,YAAY;gCAAEC,SAASvF;4BAAwB;4BAC/CwF,UAAU;gCAAED,SAAS;4BAAK;wBAC5B;wBACAE,YAAY;4BAAEF,SAASzE,MAAM2E,UAAU,IAAI;wBAAM;oBACnD;gBACF;gBAEA,MAAMC,iBAAiB,MAAM7F,mBAAmBsB,YAAYiE,iBAAiBlF;gBAE7E,IAAIwF,eAAetI,OAAO,EAAE;oBAC1BvB,aAAa,CAAC,oCAAoC,EAAE6J,eAAeiL,QAAQ,CAAC/M,MAAM,CAAC,SAAS,CAAC;oBAG7F8B,eAAeiL,QAAQ,CAAC5L,OAAO,CAAC6L,CAAAA;wBAC9BzQ,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEwQ,SAAS;oBAChC;gBACF,OAAO;oBACLzQ,QAAQC,GAAG,CAAC,CAAC,uCAAuC,EAAEsF,eAAeC,KAAK,EAAE;oBAC5E,IAAID,eAAemL,gBAAgB,EAAE;wBACnC1Q,QAAQC,GAAG,CAAC;oBACd;gBACF;YACF,EAAE,OAAOK,KAAK;gBACZN,QAAQC,GAAG,CAAC,CAAC,6CAA6C,EAAEK,IAAIC,OAAO,EAAE;YAC3E;QACF;QAGA,MAAMyE,kBAAkB,MAAMhG,gBAAgBgC,YAAYE,OAAOnB;QACjE,IAAIiF,gBAAgB/H,OAAO,EAAE;YAC3B,IAAI,CAAC8C,SAAQ;gBACXrE,aAAa,CAAC,EAAE,EAAEsJ,gBAAgBzE,OAAO,EAAE;YAC7C,OAAO;gBACLP,QAAQC,GAAG,CAAC+E,gBAAgBzE,OAAO;YACrC;QACF,OAAO;YACLP,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAE+E,gBAAgBzE,OAAO,EAAE;QAChD;QAGA,IAAIsE,mBAAmB;QACvB,IAAInC,WAAW;YACb1C,QAAQC,GAAG,CAAC;YACZ,IAAI;gBAEFD,QAAQC,GAAG,CAAC;gBACZjE,SAAS,oCAAoC;oBAC3CS,KAAKuE;oBACLrE,OAAO;gBACT;gBACAkI,mBAAmB;gBACnBnJ,aAAa;YACf,EAAE,OAAO4E,KAAK;gBACZN,QAAQC,GAAG,CAAC,CAAC,kCAAkC,EAAEK,IAAIC,OAAO,EAAE;gBAC9DP,QAAQC,GAAG,CAAC;YACd;QACF;QAGA,IAAI4E,oBAAoB,CAAC9E,SAAQ;YAC/BC,QAAQC,GAAG,CAAC;YACZ,MAAM5C,0BAA0B2D;QAClC;QAGA,IAAI,CAACjB,WAAUF,yBAAyB;YACtCG,QAAQC,GAAG,CAAC;YACZ,MAAMwF,UACJ,AAACrJ,WAAWA,OAAO,CAAC,WAAW,IAC9BsE,WAAWA,QAAQI,QAAQ,IAAIJ,QAAQI,QAAQ,CAAC;YAEnD,IAAI,CAAC2E,SAAS;gBACZ,MAAM3F,gBAAgBC;YACxB,OAAO;gBACLC,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;QACF,OAAO,IAAI,CAACF,WAAU,CAACF,yBAAyB;YAC9CG,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;QACd;QAGAD,QAAQC,GAAG,CAAC;QACZ,IAAI,CAACF,SAAQ;YACX,MAAMlC,uBAAuBmD,YAAYjB;YACzC,MAAM4Q,cAAc,MAAM/S,eAAeoD,YAAY;gBACnDE,OAAOA;gBACPnB,QAAQA;YACV;YAEA,IAAI4Q,YAAY1T,OAAO,EAAE;gBACvB,MAAMa,oBAAoBkD;gBAG1BhB,QAAQC,GAAG,CAAC;gBACZ,MAAM2Q,gBAAgB,MAAM7S,iBAAiBiD,YAAY;oBACvDE,OAAOA;oBACPnB,QAAQA;gBACV;gBAEA,IAAI6Q,cAAc3T,OAAO,EAAE;oBACzB+C,QAAQC,GAAG,CAAC;gBACd,OAAO;oBACLD,QAAQC,GAAG,CAAC,oCAAoC2Q,cAAcpL,KAAK;gBACrE;gBAGAxF,QAAQC,GAAG,CAAC;gBACZ,MAAM4Q,cAAc,MAAM7S,eAAegD,YAAY;oBACnDE,OAAOA;oBACPnB,QAAQA;gBACV;gBAEA,IAAI8Q,YAAY5T,OAAO,EAAE;oBACvB,MAAMgB,oBAAoB+C;oBAC1BhB,QAAQC,GAAG,CAAC;gBACd,OAAO;oBACLD,QAAQC,GAAG,CAAC,kCAAkC4Q,YAAYrL,KAAK;gBACjE;gBAEAxF,QAAQC,GAAG,CAAC;YACd,OAAO;gBACLD,QAAQC,GAAG,CAAC,kCAAkC0Q,YAAYnL,KAAK;YACjE;YAGA,IAAImI,eAAe;gBACjB3N,QAAQC,GAAG,CAAC;gBACZ,IAAI;oBACF,MAAM6Q,qBAAqB,GAAG9P,WAAW,yBAAyB,CAAC;oBACnE,MAAMxD,GAAGwG,KAAK,CAAC8M,oBAAoB;wBAAE7M,WAAW;oBAAK;oBAGrD,MAAMwH,OAAO,MAAM,MAAM,CAAC;oBAC1B,MAAM,EAAEsF,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC;oBACvC,MAAM,EAAEC,OAAO,EAAEtN,IAAI,EAAE,GAAG+H,KAAKwF,OAAO;oBAGtC,MAAMC,aAAaH,cAAc,YAAYI,GAAG;oBAChD,MAAMlD,aAAY+C,QAAQE;oBAC1B,MAAME,qBAAqB1N,KAAKuK,YAAW;oBAG3C,IAAI;wBACF,MAAMoD,iBAAiB,MAAM7T,GAAG8T,OAAO,CAACF;wBACxC,IAAIG,wBAAwB;wBAE5B,KAAK,MAAMjO,QAAQ+N,eAAgB;4BACjC,IAAI/N,KAAKkO,QAAQ,CAAC,QAAQ;gCACxB,MAAMC,aAAa/N,KAAK0N,oBAAoB9N;gCAC5C,MAAMoO,WAAWhO,KAAKoN,oBAAoBxN;gCAC1C,MAAMgM,UAAU,MAAM9R,GAAG2O,QAAQ,CAACsF,YAAY;gCAC9C,MAAMjU,GAAGuG,SAAS,CAAC2N,UAAUpC;gCAC7BiC;4BACF;wBACF;wBAEA7V,aAAa,CAAC,SAAS,EAAE6V,sBAAsB,sBAAsB,CAAC;wBACtEvR,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;oBACd,EAAE,OAAOK,KAAK;wBACZN,QAAQC,GAAG,CAAC,CAAC,uCAAuC,EAAEK,IAAIC,OAAO,EAAE;wBACnEP,QAAQC,GAAG,CAAC;oBACd;gBACF,EAAE,OAAOK,KAAK;oBACZN,QAAQC,GAAG,CAAC,CAAC,oCAAoC,EAAEK,IAAIC,OAAO,EAAE;gBAClE;YACF;QACF,OAAO;YACLP,QAAQC,GAAG,CAAC;YACZ,IAAI0N,eAAe;gBACjB3N,QAAQC,GAAG,CAAC;YACd;QACF;QAGA,MAAM0R,mBAAmBhR,MAAM2E,UAAU,IAAI3E,KAAK,CAAC,oBAAoB;QACvE,IAAIgR,oBAAoB,CAAC5R,SAAQ;YAC/BC,QAAQC,GAAG,CAAC;YACZ,MAAMuL,gBAAgBxK;QACxB;QAGAhB,QAAQC,GAAG,CAAC;QAGZ,MAAM2R,iBAAiBjS,kBAAkBqB;QACzChB,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,CAAC,iBAAiB,EAAE2R,eAAeC,UAAU,GAAG,YAAY,aAAa;QACrF7R,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAE2R,eAAeE,QAAQ,KAAK,WAAW,aAAaF,eAAeE,QAAQ,KAAK,aAAa,qBAAqB,qBAAqB;QAClK9R,QAAQC,GAAG,CAAC,CAAC,uBAAuB,EAAE2R,eAAe5G,WAAW,GAAG,cAAc,aAAa;QAE9FhL,QAAQC,GAAG,CAAC;QACZ,IAAIJ,yBAAyB;YAC3BG,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ,IAAI2R,eAAeC,UAAU,EAAE;gBAC7B7R,QAAQC,GAAG,CAAC;YACd;QACF,OAAO;YACLD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ,IAAI2R,eAAeC,UAAU,EAAE;gBAC7B7R,QAAQC,GAAG,CAAC;YACd;QACF;QACAD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd,EAAE,OAAOK,KAAK;QACZ3E,WAAW,CAAC,yCAAyC,EAAE2E,IAAIC,OAAO,EAAE;QAGpE,IAAI;YACF,MAAMqR,iBAAiBjS,kBAAkBqB;YACzC,IAAI4Q,eAAe5G,WAAW,IAAI4G,eAAeC,UAAU,EAAE;gBAC3D7R,QAAQC,GAAG,CAAC;gBACZ,MAAM8R,iBAAiB,MAAMnS,qBAAqBoB;gBAClD,IAAI+Q,eAAe9U,OAAO,EAAE;oBAC1B+C,QAAQC,GAAG,CAAC;gBACd,OAAO;oBACLD,QAAQC,GAAG,CAAC,CAAC,iCAAiC,EAAE8R,eAAevM,KAAK,EAAE;gBACxE;YACF;QACF,EAAE,OAAOwM,aAAa;YACpBhS,QAAQC,GAAG,CAAC,CAAC,sBAAsB,EAAE+R,YAAYzR,OAAO,EAAE;QAC5D;IACF;AACF;AAKA,eAAemB,qBAAqBf,KAAK,EAAED,OAAO;IAChDV,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,MAAMiB,QAAQP,MAAMO,KAAK,IAAIP,MAAMQ,CAAC;QAGpC,MAAM,EAAE8Q,uBAAuB,EAAE,GAAG,MAAM,MAAM,CAAC;QACjD,MAAM,EAAE1U,UAAUC,EAAE,EAAE,GAAG,MAAM,MAAM,CAAC;QAGtCwC,QAAQC,GAAG,CAAC;QACZ,MAAMiS,oBAAoBD;QAC1B,MAAMzU,GAAGuG,SAAS,CAAC,aAAamO;QAChClS,QAAQC,GAAG,CAAC;QAGZD,QAAQC,GAAG,CAAC;QACZ,MAAMzC,GAAGwG,KAAK,CAAC,+BAA+B;YAAEC,WAAW;QAAK;QAGhE,MAAM,EAAE8M,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC;QACvC,MAAM,EAAEC,OAAO,EAAEtN,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC;QACvC,MAAMwN,aAAaH,cAAc,YAAYI,GAAG;QAChD,MAAMlD,aAAY+C,QAAQE;QAC1B,MAAMiB,oBAAoBzO,KAAKuK,YAAW;QAC1C,IAAI;YACF,MAAMmE,eAAe,MAAM5U,GAAG8T,OAAO,CAACa;YACtC,IAAIE,iBAAiB;YAErB,KAAK,MAAM/O,QAAQ8O,aAAc;gBAC/B,IAAI9O,KAAKkO,QAAQ,CAAC,QAAQ;oBACxB,MAAMC,aAAa,GAAGU,kBAAkB,CAAC,EAAE7O,MAAM;oBACjD,MAAMoO,WAAW,CAAC,4BAA4B,EAAEpO,MAAM;oBACtD,MAAMgM,UAAU,MAAM9R,GAAG2O,QAAQ,CAACsF,YAAY;oBAC9C,MAAMjU,GAAGuG,SAAS,CAAC2N,UAAUpC;oBAC7B+C;gBACF;YACF;YAEArS,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEoS,eAAe,yBAAyB,CAAC;QACrE,EAAE,OAAO/R,KAAK;YACZN,QAAQC,GAAG,CAAC,6CAA6CK,IAAIC,OAAO;QACtE;QAGAP,QAAQC,GAAG,CAAC;QACZ,MAAMzC,GAAGwG,KAAK,CAAC,6BAA6B;YAAEC,WAAW;QAAK;QAG9D,MAAMqO,kBAAkB5O,KAAKuK,YAAW;QACxC,IAAI;YACF,MAAMsE,aAAa,MAAM/U,GAAG8T,OAAO,CAACgB;YACpC,IAAIE,eAAe;YAEnB,KAAK,MAAMlP,QAAQiP,WAAY;gBAC7B,IAAIjP,KAAKkO,QAAQ,CAAC,QAAQ;oBACxB,MAAMC,aAAa,GAAGa,gBAAgB,CAAC,EAAEhP,MAAM;oBAC/C,MAAMoO,WAAW,CAAC,0BAA0B,EAAEpO,MAAM;oBACpD,MAAMgM,UAAU,MAAM9R,GAAG2O,QAAQ,CAACsF,YAAY;oBAC9C,MAAMjU,GAAGuG,SAAS,CAAC2N,UAAUpC;oBAC7BkD;gBACF;YACF;YAEAxS,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEuS,aAAa,uBAAuB,CAAC;QACjE,EAAE,OAAOlS,KAAK;YACZN,QAAQC,GAAG,CAAC,2CAA2CK,IAAIC,OAAO;QACpE;QAEAP,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOK,KAAK;QACZN,QAAQC,GAAG,CAAC,CAAC,oCAAoC,EAAEK,IAAIC,OAAO,EAAE;QAChEP,QAAQC,GAAG,CAAC,gBAAgBK,IAAImS,KAAK;QACrC3W,QAAQiN,IAAI,CAAC;IACf;AACF"}